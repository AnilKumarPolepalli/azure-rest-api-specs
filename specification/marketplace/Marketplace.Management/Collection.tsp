import "@azure-tools/typespec-azure-core";
import "@azure-tools/typespec-azure-resource-manager";
import "@typespec/openapi";
import "@typespec/rest";
import "./models.tsp";
import "./PrivateStore.tsp";

using TypeSpec.Rest;
using Azure.ResourceManager;
using TypeSpec.Http;
using TypeSpec.OpenAPI;

namespace Microsoft.Marketplace;
/**
 * The Collection data structure.
 */
@parentResource(PrivateStore)
model Collection is Azure.ResourceManager.ProxyResource<CollectionProperties> {
  ...ResourceNameParameter<
    Resource = Collection,
    KeyName = "collectionId",
    SegmentName = "collections",
    NamePattern = ""
  >;
}

@armResourceOperations
interface Collections {
  /**
   * Gets private store collection
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  @operationId("PrivateStoreCollection_Get")
  get is ArmResourceRead<Collection>;

  /**
   * Create or update private store collection
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  #suppress "@azure-tools/typespec-azure-resource-manager/arm-put-operation-response-codes" "For backward compatibility"
  @operationId("PrivateStoreCollection_CreateOrUpdate")
  createOrUpdate is ArmResourceCreateOrReplaceSync<
    Collection,
    Response = ArmResourceUpdatedResponse<Collection>
  >;

  /**
   * Delete a collection from the given private store.
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  @operationId("PrivateStoreCollection_Delete")
  delete is ArmResourceDeleteSync<Collection>;

  /**
   * Gets private store collections list
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  @operationId("PrivateStoreCollection_List")
  list is ArmResourceListByParent<
    Collection,
    Response = ArmResponse<CollectionsList>
  >;

  /**
   * Set rule for specific private store and collection
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  @action("setRules")
  @operationId("SetCollectionRules")
  setCollectionRules is ArmResourceActionSync<
    Collection,
    {
      @bodyRoot
      payload?: SetRulesRequest;
    },
    OkResponse
  >;

  /**
   * Get a list of all private store rules in the given private store and collection
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  @operationId("QueryRules")
  queryRules is ArmResourceActionSync<
    Collection,
    void,
    ArmResponse<RuleListResponse>
  >;

  /**
   * transferring offers (copy or move) from source collection to target collection(s)
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  @operationId("PrivateStoreCollection_TransferOffers")
  transferOffers is ArmResourceActionSync<
    Collection,
    {
      @bodyRoot
      payload?: TransferOffersProperties;
    },
    ArmResponse<TransferOffersResponse>
  >;

  /**
   * Delete all existing offers from the collection and enable approve all items.
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  @operationId("PrivateStoreCollection_ApproveAllItems")
  approveAllItems is ArmResourceActionSync<
    Collection,
    void,
    ArmResponse<Collection>
  >;

  /**
   * Disable approve all items for the collection.
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  @operationId("PrivateStoreCollection_DisableApproveAllItems")
  disableApproveAllItems is ArmResourceActionSync<
    Collection,
    void,
    ArmResponse<Collection>
  >;

  /**
   * Get a list of all offers in the given collection according to the required contexts.
   */
  #suppress "@azure-tools/typespec-azure-core/no-openapi" "non-standard operations"
  @action("mapOffersToContexts")
  @operationId("PrivateStoreCollectionOffer_ListByContexts")
  listByContexts is ArmResourceActionSync<
    Collection,
    {
      @bodyRoot
      payload?: CollectionOffersByAllContextsPayload;
    },
    ArmResponse<CollectionOffersByContextList>
  >;
}

@@doc(Collection.name, "The collection ID");
@@doc(Collection.properties, "The collection data structure.");
@@doc(Collections.createOrUpdate::parameters.resource, "");
