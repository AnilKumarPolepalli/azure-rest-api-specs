import "@typespec/rest";
import "@typespec/http";
import "@typespec/versioning";

using TypeSpec.Rest;
using TypeSpec.Http;
using TypeSpec.Versioning;

namespace ModelClient;

alias ImageGenerationOptions = {
  @doc("A description of the desired images.")
  prompt: string;

  @doc("""
  The desired dimension in pixels of the generated images, in the format "<Width>x<Hight>".
  For example: "1024x1024", "1792x1024".
  """)
  size: string;

  @doc("""
  The desired image generation quality level to use.
  """)
  quality?: ImageGenerationQuality = ImageGenerationQuality.standard;

  @doc("The format in which image generation response items should be presented.")
  response_format?: ImageGenerationResponseFormat;

  @doc("""
  If specified, the system will make a best effort to sample deterministically such that repeated requests with the
  same seed and parameters should return the same result. Determinism is not guaranteed."
  """)
  seed?: int64;
};

@doc("The result of a successful image generation operation.")
model ImageGenerations {
  @doc("A unique identifier associated with this image generation response.")
  id: string;

  @doc("""
  A timestamp representing when this operation was started.
  Represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.
  """)
  @encode(DateTimeKnownEncoding.unixTimestamp, int32)
  created: utcDateTime;

  @doc("The model used for the image generation.")
  `model`: string;

  @doc("The images generated by the operation.")
  data: ImageGenerationData[];
}

@doc("""
An image generation configuration that specifies how the model should prioritize quality, cost, and speed.
""")
enum ImageGenerationQuality {
  @doc("""
  Requests image generation with standard, balanced characteristics of quality, cost, and speed.
  """)
  standard: "standard",

  @doc("""
  Requests image generation with higher quality, higher cost and lower speed relative to standard.
  """)
  hd: "hd",
}

@doc("The format in which the generated images are returned.")
enum ImageGenerationResponseFormat {
  @doc("Image generation response items should provide a URL from which the image may be retrieved.")
  url: "url",

  @doc("Image generation response items should provide image data as a base64-encoded string.")
  base64: "b64_json",
}

@doc("""
A representation of a single generated image, provided as either base64-encoded data or as a URL from which the image
may be retrieved.
""")
model ImageGenerationData {
  @doc("The URL that provides temporary access to download the generated image.")
  url?: url;

  @doc("The complete data for an image, represented as a base64-encoded string.")
  b64_json?: string;
}
