{
  "swagger": "2.0",
  "info": {
    "title": "Azure AI Data Plane",
    "version": "2024-11-01-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/projects/{projectName}",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "Global endpoint in the form of: https://[hub-id]/api.ai.azure.com",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      },
      {
        "name": "projectName",
        "in": "path",
        "description": "The name of the AI project.",
        "required": true,
        "type": "string"
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://ai.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://ai.azure.com/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/assistants": {
      "get": {
        "operationId": "ListAssistants",
        "description": "Gets a list of assistants that were previously created.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of assistants.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/Assistant"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateAssistant",
        "description": "Creates a new assistant.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The request details to use when creating a new assistant.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssistantCreationOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new assistant instance.",
            "schema": {
              "$ref": "#/definitions/Assistant"
            }
          }
        }
      }
    },
    "/assistants/{assistantId}": {
      "get": {
        "operationId": "GetAssistant",
        "description": "Retrieves an existing assistant.",
        "parameters": [
          {
            "name": "assistantId",
            "in": "path",
            "description": "The ID of the assistant to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested assistant instance.",
            "schema": {
              "$ref": "#/definitions/Assistant"
            }
          }
        }
      },
      "post": {
        "operationId": "UpdateAssistant",
        "description": "Modifies an existing assistant.",
        "parameters": [
          {
            "name": "assistantId",
            "in": "path",
            "description": "The ID of the assistant to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The request details to use when modifying an existing assistant.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssistantOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated assistant instance.",
            "schema": {
              "$ref": "#/definitions/Assistant"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteAssistant",
        "description": "Deletes an assistant.",
        "parameters": [
          {
            "name": "assistantId",
            "in": "path",
            "description": "The ID of the assistant to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status information about the requested deletion operation.",
            "schema": {
              "$ref": "#/definitions/AssistantDeletionStatus"
            }
          }
        }
      }
    },
    "/batchEndpoints": {
      "get": {
        "operationId": "ListBatchEndpoints",
        "description": "List Batch Endpoints.",
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "description": "Number of endpoints to be retrieved in a page of results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedBatchEndpoint"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/batchEndpoints/{endpointName}": {
      "get": {
        "operationId": "GetBatchEndpoint",
        "description": "Get a Batch Endpoint.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Name for the Batch Endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/BatchEndpoint"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "CreateOrUpdateBatchEndpoint",
        "description": "Create or Update a Batch Endpoint.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Name for the Batch inference endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Batch inference endpoint definition object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchEndpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/BatchEndpoint"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateBatchEndpoint",
        "description": "Update a Batch Endpoint.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Name for the Batch inference endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Mutable batch inference endpoint definition object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartialMinimalTrackedResourceWithIdentity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/BatchEndpoint"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteBatchEndpoint",
        "description": "Delete an Batch Endpoint.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Inference Endpoint name.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/batchEndpoints/{endpointName}/deployments": {
      "get": {
        "operationId": "ListBatchDeployments",
        "description": "List Batch Deployments.",
        "parameters": [
          {
            "name": "endpointName",
            "in": "path",
            "description": "Endpoint name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "Ordering of list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Top of list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedBatchDeployment"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/batchEndpoints/{endpointName}/deployments/{deploymentName}": {
      "get": {
        "operationId": "GetBatchDeployment",
        "description": "Gets a batch inference deployment by id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Endpoint name",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Inference deployment identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/BatchDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "CreateOrUpdateBatchDeployment",
        "description": "Create or Update a Batch Deployment.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Endpoint name",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "The identifier for the Batch inference deployment.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Batch inference deployment definition object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchDeployment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/BatchEndpoint"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateBatchDeployment",
        "description": "Update a Batch Deployment.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Endpoint name",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Inference deployment identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Mutable batch inference endpoint definition object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/BatchDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteBatchDeployment",
        "description": "Delete an Batch Deployment.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Endpoint name",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Inference deployment identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/connections": {
      "get": {
        "operationId": "Connections_List",
        "description": "List all connections in the project.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/connections/{name}": {
      "get": {
        "operationId": "Connections_Get",
        "description": "Get a connection by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the connection.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/connections/{name}/listsecrets": {
      "post": {
        "operationId": "Connections_Post",
        "description": "Get a connection with credentials by name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the connection.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Connection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/connections/withsecrets": {
      "post": {
        "operationId": "Connections_ListWithCredentials",
        "description": "List all connections with credentials in the project.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedConnection"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/data": {
      "get": {
        "operationId": "Data_List",
        "description": "List data containers.",
        "parameters": [
          {
            "name": "$skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDataContainer"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/data/{name}": {
      "get": {
        "operationId": "Data_Get",
        "description": "Get container.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Container name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataContainer"
            }
          }
        }
      },
      "put": {
        "operationId": "Data_CreateOrUpdate",
        "description": "Create or update container.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Container name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Container entity to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataContainer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataContainer"
            }
          }
        }
      }
    },
    "/data/{name}/{workspaceName}": {
      "delete": {
        "operationId": "Data_Delete",
        "description": "Delete container.",
        "parameters": [
          {
            "name": "workspaceName",
            "in": "path",
            "description": "Name of Azure Machine Learning workspace.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_-]{2,32}$"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Container name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        }
      }
    },
    "/data/{name}/versions": {
      "get": {
        "operationId": "DataVersionsBase_List",
        "description": "List data versions in the data container",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Container name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$"
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "Please choose OrderBy value from ['createdtime', 'modifiedtime']",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Top count of results, top count cannot be greater than the page size. If topCount > page size, results with be default page size count will be returned",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Continuation token for pagination.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "[ListViewType.ActiveOnly, ListViewType.ArchivedOnly, ListViewType.All] View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDataVersionBase"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/data/{name}/versions/{version}": {
      "get": {
        "operationId": "DataVersionsBase_Get",
        "description": "Get version.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Container name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataVersionBase"
            }
          }
        }
      },
      "put": {
        "operationId": "DataVersionsBase_CreateOrUpdate",
        "description": "Create or update version.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Container name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Version entity to create or update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataVersionBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataVersionBase"
            }
          }
        }
      },
      "delete": {
        "operationId": "DataVersionsBase_Delete",
        "description": "Delete version.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Container name.",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]{0,254}$"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        }
      }
    },
    "/data/{name}/versions/{version}/publish": {
      "post": {
        "operationId": "DataVersionsBase_Publish",
        "description": "Publish version asset into registry.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Container name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Destination registry info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DestinationAsset"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          }
        }
      }
    },
    "/evaluations": {
      "get": {
        "operationId": "Evaluations_List",
        "description": "List evaluations",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedEvaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/evaluations/{id}": {
      "get": {
        "operationId": "Evaluations_Get",
        "description": "Get an evaluation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Evaluations_Update",
        "description": "Update an evaluation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the evaluation.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Update evaluation request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEvaluationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/evaluations/create": {
      "post": {
        "operationId": "Evaluations_Create",
        "description": "Creates an evaluation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Properties of Evaluation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Evaluation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "operationId": "ListFiles",
        "description": "Gets a list of previously uploaded files.",
        "parameters": [
          {
            "name": "purpose",
            "in": "query",
            "description": "A value that, when provided, limits list results to files matching the corresponding purpose.",
            "required": false,
            "type": "string",
            "enum": [
              "fine-tune",
              "fine-tune-results",
              "assistants",
              "assistants_output",
              "batch",
              "batch_output",
              "vision"
            ],
            "x-ms-enum": {
              "name": "FilePurpose",
              "modelAsString": true,
              "values": [
                {
                  "name": "fineTune",
                  "value": "fine-tune",
                  "description": "Indicates a file is used for fine tuning input."
                },
                {
                  "name": "fineTuneResults",
                  "value": "fine-tune-results",
                  "description": "Indicates a file is used for fine tuning results."
                },
                {
                  "name": "assistants",
                  "value": "assistants",
                  "description": "Indicates a file is used as input to assistants."
                },
                {
                  "name": "assistantsOutput",
                  "value": "assistants_output",
                  "description": "Indicates a file is used as output by assistants."
                },
                {
                  "name": "batch",
                  "value": "batch",
                  "description": "Indicates a file is used as input to batch operations."
                },
                {
                  "name": "batchOutput",
                  "value": "batch_output",
                  "description": "Indicates a file is used as output by a vector store batch operation."
                },
                {
                  "name": "vision",
                  "value": "vision",
                  "description": "Indicates a file is used as input to a vision operation."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of files.",
            "schema": {
              "$ref": "#/definitions/FileListResponse"
            }
          }
        }
      },
      "post": {
        "operationId": "UploadFile",
        "description": "Uploads a file for use by other operations.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file data (not filename) to upload.",
            "required": true,
            "type": "file"
          },
          {
            "name": "purpose",
            "in": "formData",
            "description": "The intended purpose of the file.",
            "required": true,
            "type": "string",
            "enum": [
              "fine-tune",
              "fine-tune-results",
              "assistants",
              "assistants_output",
              "batch",
              "batch_output",
              "vision"
            ],
            "x-ms-enum": {
              "name": "FilePurpose",
              "modelAsString": true,
              "values": [
                {
                  "name": "fineTune",
                  "value": "fine-tune",
                  "description": "Indicates a file is used for fine tuning input."
                },
                {
                  "name": "fineTuneResults",
                  "value": "fine-tune-results",
                  "description": "Indicates a file is used for fine tuning results."
                },
                {
                  "name": "assistants",
                  "value": "assistants",
                  "description": "Indicates a file is used as input to assistants."
                },
                {
                  "name": "assistantsOutput",
                  "value": "assistants_output",
                  "description": "Indicates a file is used as output by assistants."
                },
                {
                  "name": "batch",
                  "value": "batch",
                  "description": "Indicates a file is used as input to batch operations."
                },
                {
                  "name": "batchOutput",
                  "value": "batch_output",
                  "description": "Indicates a file is used as output by a vector store batch operation."
                },
                {
                  "name": "vision",
                  "value": "vision",
                  "description": "Indicates a file is used as input to a vision operation."
                }
              ]
            }
          },
          {
            "name": "filename",
            "in": "formData",
            "description": "A filename to associate with the uploaded data.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A representation of the uploaded file.",
            "schema": {
              "$ref": "#/definitions/OpenAIFile"
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "get": {
        "operationId": "GetFile",
        "description": "Returns information about a specific file. Does not retrieve file content.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OpenAIFile"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteFile",
        "description": "Delete a previously uploaded file.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FileDeletionStatus"
            }
          }
        }
      }
    },
    "/files/{fileId}/content": {
      "get": {
        "operationId": "GetFileContent",
        "description": "Returns information about a specific file. Does not retrieve file content.",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      }
    },
    "/indexes": {
      "get": {
        "operationId": "Indexes_ListLatest",
        "description": "List the latest version of each index. Latest is defined by most recent created by date.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/indexes/{name}": {
      "get": {
        "operationId": "Indexes_GetLatest",
        "description": "Get latest version of the Index. Latest is defined by most recent created by date.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the index.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/indexes/{name}:getNextVersion": {
      "post": {
        "operationId": "Indexes_GetNextVersion",
        "description": "Get next Index version as defined by the server. The server keeps track of all versions that are string-representations of integers. If one exists, the nextVersion will be a string representation of the highest integer value + 1. Otherwise, the nextVersion will default to '1'.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the index.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VersionInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/indexes/{name}/versions": {
      "get": {
        "operationId": "Indexes_List",
        "description": "List the versions of an Index given the name.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the index.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "View type for including/excluding (for example) archived entities.",
            "required": true,
            "type": "string",
            "default": "ActiveOnly"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Ordering of list: Please choose orderby value from ['createdAt', 'lastModifiedAt'].",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Ordering of list: Please choose orderby value from ['createdAt', 'lastModifiedAt'].",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedIndex"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/indexes/{name}/versions/{version}": {
      "get": {
        "operationId": "Indexes_Get",
        "description": "Get a specific version of an Index.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the index.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the index.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Indexes_CreateOrUpdate",
        "description": "Creates or updates a IndexVersion.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the index.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the index.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Properties of an Index Version.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Index"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/Index"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/models/{name}": {
      "get": {
        "operationId": "ModelContainers_Get",
        "description": "Get a model container.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the model container.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ModelContainer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "ModelContainers_CreateOrUpdate",
        "description": "Creates or updates a model container.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the model container.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ModelContainer"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/ModelContainer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/models/{name}/versions": {
      "get": {
        "operationId": "ModelVersions_List",
        "description": "List model versions.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the model container.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "$orderBy",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "$top",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Model version",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Model description",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of initial results to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "query",
            "description": "Comma-separated list of property names (and optionally values). Example: prop1,prop2=value2",
            "required": false,
            "type": "string"
          },
          {
            "name": "feed",
            "in": "query",
            "description": "Name of the feed.",
            "required": false,
            "type": "string"
          },
          {
            "name": "listViewType",
            "in": "query",
            "description": "View type for including/excluding (for example) archived entities.",
            "required": false,
            "type": "string",
            "enum": [
              "ActiveOnly",
              "ArchivedOnly",
              "All"
            ],
            "x-ms-enum": {
              "name": "ListViewType",
              "modelAsString": true,
              "values": [
                {
                  "name": "ActiveOnly",
                  "value": "ActiveOnly",
                  "description": "List only active items."
                },
                {
                  "name": "ArchivedOnly",
                  "value": "ArchivedOnly",
                  "description": "List only archived items."
                },
                {
                  "name": "All",
                  "value": "All",
                  "description": "List all items."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedModelVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/onlineEndpoints": {
      "get": {
        "operationId": "ListOnlineEndpoints",
        "description": "List Online Endpoints.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the endpoint.",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of endpoints to be retrieved in a page of results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "computeType",
            "in": "query",
            "description": "EndpointComputeType to be filtered by.",
            "required": false,
            "type": "string",
            "enum": [
              "Managed",
              "Kubernetes",
              "AzureMLCompute"
            ],
            "x-ms-enum": {
              "name": "EndpointComputeType",
              "modelAsString": true,
              "values": [
                {
                  "name": "Managed",
                  "value": "Managed",
                  "description": "Managed"
                },
                {
                  "name": "Kubernetes",
                  "value": "Kubernetes",
                  "description": "Kubernetes"
                },
                {
                  "name": "AzureMLCompute",
                  "value": "AzureMLCompute",
                  "description": "AzureMLCompute"
                }
              ]
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "A set of tags with which to filter the returned models. It is a comma separated string of tags key or tags key=value. Example: tagKey1,tagKey2,tagKey3=value3 .",
            "required": false,
            "type": "string"
          },
          {
            "name": "properties",
            "in": "query",
            "description": "A set of properties with which to filter the returned models. It is a comma separated string of properties key and/or properties key=value Example: propKey1,propKey2,propKey3=value3 .",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The option to order the response.",
            "required": false,
            "type": "string",
            "enum": [
              "CreatedAtDesc",
              "CreatedAtAsc",
              "UpdatedAtDesc",
              "UpdatedAtAsc"
            ],
            "x-ms-enum": {
              "name": "OrderString",
              "modelAsString": true,
              "values": [
                {
                  "name": "CreatedAtDesc",
                  "value": "CreatedAtDesc",
                  "description": "Sort creation date/time in descending order."
                },
                {
                  "name": "CreatedAtAsc",
                  "value": "CreatedAtAsc",
                  "description": "Sort creation date/time in ascending order."
                },
                {
                  "name": "UpdatedAtDesc",
                  "value": "UpdatedAtDesc",
                  "description": "Sort updated at date/time in descending order."
                },
                {
                  "name": "UpdatedAtAsc",
                  "value": "UpdatedAtAsc",
                  "description": "Sort updated at date/time in ascending order."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedOnlineEndpoint"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/onlineEndpoints/{name}": {
      "get": {
        "operationId": "GetOnlineEndpoint",
        "description": "Get an Online Endpoint.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OnlineEndpoint"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "CreateOrUpdateOnlineEndpoint",
        "description": "Create or Update an Online Endpoint.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Online Endpoint",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OnlineEndpoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OnlineEndpoint"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateOnlineEndpoint",
        "description": "Update an Online Endpoint.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Online Endpoint entity to apply during operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartialMinimalTrackedResourceWithIdentity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OnlineEndpoint"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteOnlineEndpoint",
        "description": "Delete an Online Endpoint.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/onlineEndpoints/{endpointName}/deployments": {
      "get": {
        "operationId": "ListOnlineDeployments",
        "description": "List Online Deployments.",
        "parameters": [
          {
            "name": "endpointName",
            "in": "path",
            "description": "Inference endpoint name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "Ordering of list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Top of list.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedOnlineDeployment"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/onlineEndpoints/{endpointName}/deployments/{deploymentName}": {
      "get": {
        "operationId": "GetOnlineDeployment",
        "description": "Gets an online inference deployment by id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Inference endpoint name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Inference Endpoint Deployment name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OnlineDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "put": {
        "operationId": "CreateOrUpdateOnlineDeployment",
        "description": "Create or Update an Online Deployment.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Inference endpoint name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Inference Endpoint Deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Inference Endpoint entity to apply during operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OnlineDeployment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OnlineDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "UpdateOnlineDeployment",
        "description": "Update a Online Deployment.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Inference endpoint name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Inference Endpoint Deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Online Endpoint entity to apply during operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PartialMinimalTrackedResourceWithSku"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OnlineDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteOnlineDeployment",
        "description": "Delete an Online Deployment.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Inference endpoint name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Inference Endpoint Deployment name.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/onlineEndpoints/{endpointName}/deployments/{deploymentName}/getLogs": {
      "post": {
        "operationId": "PollLogsOnlineDeployment",
        "description": "Polls an Endpoint operation.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Inference endpoint name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Inference Endpoint Deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The request containing parameters for retrieving logs.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentLogsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeploymentLogs"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/onlineEndpoints/{endpointName}/deployments/{deploymentName}/skus": {
      "get": {
        "operationId": "GetSkusOnlineDeployment",
        "description": "List Inference Endpoint Deployment Skus.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "endpointName",
            "in": "path",
            "description": "Inference endpoint name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Inference Endpoint Deployment name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of Skus to be retrieved in a page of results.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SkuResourceArmPaginatedResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/onlineEndpoints/{name}/listKeys": {
      "post": {
        "operationId": "ListKeysOnlineEndpoint",
        "description": "List EndpointAuthKeys for an Endpoint using Key-based authentication.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Online Endpoint",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegenerateEndpointKeysRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EndpointAuthKeys"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/onlineEndpoints/{name}/regenerateKeys": {
      "post": {
        "operationId": "RegenerateKeysOnlineEndpoint",
        "description": "Regenerate EndpointAuthKeys for an Endpoint using Key-based authentication (asynchronous).",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EndpointAuthKeys"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/onlineEndpoints/{name}/token": {
      "put": {
        "operationId": "GetTokenOnlineEndpoint",
        "description": "Retrieve a valid AML token for an Endpoint using AMLToken-based authentication.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true,
            "type": "string",
            "maxLength": 254,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/EndpointAuthToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/threads": {
      "post": {
        "operationId": "CreateThread",
        "description": "Creates a new thread. Threads contain messages and can be run by assistants.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The details used to create a new assistant thread.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssistantThreadCreationOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the newly created thread.",
            "schema": {
              "$ref": "#/definitions/AssistantThread"
            }
          }
        }
      }
    },
    "/threads/{threadId}": {
      "get": {
        "operationId": "GetThread",
        "description": "Gets information about an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to retrieve information about.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested thread.",
            "schema": {
              "$ref": "#/definitions/AssistantThread"
            }
          }
        }
      },
      "post": {
        "operationId": "UpdateThread",
        "description": "Modifies an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The details used to update an existing assistant thread.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAssistantThreadOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the modified thread.",
            "schema": {
              "$ref": "#/definitions/AssistantThread"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteThread",
        "description": "Deletes an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status information about the requested thread deletion operation.",
            "schema": {
              "$ref": "#/definitions/ThreadDeletionStatus"
            }
          }
        }
      }
    },
    "/threads/{threadId}/messages": {
      "get": {
        "operationId": "ListMessages",
        "description": "Gets a list of messages that exist on a thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to list messages from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "query",
            "description": "Filter messages by the run ID that generated them.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of messages.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/ThreadMessage"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateMessage",
        "description": "Creates a new message on a specified thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to create the new message on.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "A single message within an assistant thread, as provided during that thread's creation for its initial state.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThreadMessageOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A representation of the new message.",
            "schema": {
              "$ref": "#/definitions/ThreadMessage"
            }
          }
        }
      }
    },
    "/threads/{threadId}/messages/{messageId}": {
      "get": {
        "operationId": "GetMessage",
        "description": "Gets an existing message from an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to retrieve the specified message from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message to retrieve from the specified thread.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A representation of the requested message.",
            "schema": {
              "$ref": "#/definitions/ThreadMessage"
            }
          }
        }
      },
      "post": {
        "operationId": "UpdateMessage",
        "description": "Modifies an existing message on an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread containing the specified message to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message to modify on the specified thread.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "type": "object",
                  "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
                  "x-nullable": true,
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A representation of the modified message.",
            "schema": {
              "$ref": "#/definitions/ThreadMessage"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs": {
      "get": {
        "operationId": "ListRuns",
        "description": "Gets a list of runs for a specified thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to list runs from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of thread runs.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/ThreadRun"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateRun",
        "description": "Creates a new run for an assistant thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The details used when creating a new run of an assistant thread.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRunOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the new thread run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}": {
      "get": {
        "operationId": "GetRun",
        "description": "Gets an existing run from an existing thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread to retrieve run information from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the thread to retrieve information about.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested information about the specified thread run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      },
      "post": {
        "operationId": "UpdateRun",
        "description": "Modifies an existing thread run.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread associated with the specified run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the run to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metadata": {
                  "type": "object",
                  "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
                  "x-nullable": true,
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the modified run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}/cancel": {
      "post": {
        "operationId": "CancelRun",
        "description": "Cancels a run of an in progress thread.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread being run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the run to cancel.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated information about the cancelled run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}/steps": {
      "get": {
        "operationId": "ListRunSteps",
        "description": "Gets a list of run steps from a thread run.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread that was run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the run to list steps from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested list of run steps.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/RunStep"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}/steps/{stepId}": {
      "get": {
        "operationId": "GetRunStep",
        "description": "Gets a single run step from a thread run.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread that was run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the specific run to retrieve the step from.",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "description": "The ID of the step to retrieve information about.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the requested run step.",
            "schema": {
              "$ref": "#/definitions/RunStep"
            }
          }
        }
      }
    },
    "/threads/{threadId}/runs/{runId}/submit_tool_outputs": {
      "post": {
        "operationId": "SubmitToolOutputsToRun",
        "description": "Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires_action' with a required_action.type of 'submit_tool_outputs'.",
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "description": "The ID of the thread that was run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "runId",
            "in": "path",
            "description": "The ID of the run that requires tool outputs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "tool_outputs": {
                  "type": "array",
                  "description": "A list of tools for which the outputs are being submitted.",
                  "items": {
                    "$ref": "#/definitions/ToolOutput"
                  },
                  "x-ms-client-name": "toolOutputs",
                  "x-ms-identifiers": []
                },
                "stream": {
                  "type": "boolean",
                  "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.",
                  "x-nullable": true
                }
              },
              "required": [
                "tool_outputs"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated information about the run.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/threads/runs": {
      "post": {
        "operationId": "CreateThreadAndRun",
        "description": "Creates a new assistant thread and immediately starts a run using that new thread.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The details used when creating and immediately running a new assistant thread.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAndRunThreadOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the newly created thread.",
            "schema": {
              "$ref": "#/definitions/ThreadRun"
            }
          }
        }
      }
    },
    "/vector_stores": {
      "get": {
        "operationId": "ListVectorStores",
        "description": "Returns a list of vector stores.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/VectorStore"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateVectorStore",
        "description": "Creates a vector store.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request object for creating a vector store.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VectorStoreOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStore"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}": {
      "get": {
        "operationId": "GetVectorStore",
        "description": "Returns the vector store object matching the specified ID.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStore"
            }
          }
        }
      },
      "post": {
        "operationId": "ModifyVectorStore",
        "description": "The ID of the vector store to modify.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request object for updating a vector store.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VectorStoreUpdateOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStore"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteVectorStore",
        "description": "Deletes the vector store object matching the specified ID.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store to delete.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreDeletionStatus"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/file_batches": {
      "post": {
        "operationId": "CreateVectorStoreFileBatch",
        "description": "Create a vector store file batch.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store for which to create a File Batch.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "file_ids": {
                  "type": "array",
                  "description": "A list of File IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
                  "minItems": 1,
                  "maxItems": 500,
                  "items": {
                    "type": "string"
                  },
                  "x-ms-client-name": "fileIds"
                },
                "chunking_strategy": {
                  "$ref": "#/definitions/VectorStoreChunkingStrategyRequest",
                  "description": "The chunking strategy used to chunk the file(s). If not set, will use the auto strategy.",
                  "x-ms-client-name": "chunkingStrategy"
                }
              },
              "required": [
                "file_ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFileBatch"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/file_batches/{batchId}": {
      "get": {
        "operationId": "GetVectorStoreFileBatch",
        "description": "Retrieve a vector store file batch.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file batch belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "The ID of the file batch being retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFileBatch"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel": {
      "post": {
        "operationId": "CancelVectorStoreFileBatch",
        "description": "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file batch belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "The ID of the file batch to cancel.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFileBatch"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/file_batches/{batchId}/files": {
      "get": {
        "operationId": "ListVectorStoreFileBatchFiles",
        "description": "Returns a list of vector store files in a batch.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file batch belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "The ID of the file batch that the files belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter by file status.",
            "required": false,
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ],
            "x-ms-enum": {
              "name": "VectorStoreFileStatusFilter",
              "modelAsString": true,
              "values": [
                {
                  "name": "inProgress",
                  "value": "in_progress",
                  "description": "Retrieve only files that are currently being processed"
                },
                {
                  "name": "completed",
                  "value": "completed",
                  "description": "Retrieve only files that have been successfully processed"
                },
                {
                  "name": "failed",
                  "value": "failed",
                  "description": "Retrieve only files that have failed to process"
                },
                {
                  "name": "cancelled",
                  "value": "cancelled",
                  "description": "Retrieve only files that were cancelled"
                }
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/VectorStoreFile"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/files": {
      "get": {
        "operationId": "ListVectorStoreFiles",
        "description": "Returns a list of vector store files.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the files belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter by file status.",
            "required": false,
            "type": "string",
            "enum": [
              "in_progress",
              "completed",
              "failed",
              "cancelled"
            ],
            "x-ms-enum": {
              "name": "VectorStoreFileStatusFilter",
              "modelAsString": true,
              "values": [
                {
                  "name": "inProgress",
                  "value": "in_progress",
                  "description": "Retrieve only files that are currently being processed"
                },
                {
                  "name": "completed",
                  "value": "completed",
                  "description": "Retrieve only files that have been successfully processed"
                },
                {
                  "name": "failed",
                  "value": "failed",
                  "description": "Retrieve only files that have failed to process"
                },
                {
                  "name": "cancelled",
                  "value": "cancelled",
                  "description": "Retrieve only files that were cancelled"
                }
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.",
            "required": false,
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "x-ms-enum": {
              "name": "ListSortOrder",
              "modelAsString": true,
              "values": [
                {
                  "name": "ascending",
                  "value": "asc",
                  "description": "Specifies an ascending sort order."
                },
                {
                  "name": "descending",
                  "value": "desc",
                  "description": "Specifies a descending sort order."
                }
              ]
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
            "required": false,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "description": "The response data for a requested list of items.",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "The object type, which is always list.",
                  "enum": [
                    "list"
                  ],
                  "x-ms-enum": {
                    "modelAsString": false
                  }
                },
                "data": {
                  "type": "array",
                  "description": "The requested list of items.",
                  "items": {
                    "$ref": "#/definitions/VectorStoreFile"
                  }
                },
                "first_id": {
                  "type": "string",
                  "description": "The first ID represented in this list.",
                  "x-ms-client-name": "firstId"
                },
                "last_id": {
                  "type": "string",
                  "description": "The last ID represented in this list.",
                  "x-ms-client-name": "lastId"
                },
                "has_more": {
                  "type": "boolean",
                  "description": "A value indicating whether there are additional values available not captured in this list.",
                  "x-ms-client-name": "hasMore"
                }
              },
              "required": [
                "object",
                "data",
                "first_id",
                "last_id",
                "has_more"
              ]
            }
          }
        }
      },
      "post": {
        "operationId": "CreateVectorStoreFile",
        "description": "Create a vector store file by attaching a file to a vector store.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store for which to create a File.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "file_id": {
                  "type": "string",
                  "description": "A File ID that the vector store should use. Useful for tools like `file_search` that can access files.",
                  "x-ms-client-name": "fileId"
                },
                "chunking_strategy": {
                  "$ref": "#/definitions/VectorStoreChunkingStrategyRequest",
                  "description": "The chunking strategy used to chunk the file(s). If not set, will use the auto strategy.",
                  "x-ms-client-name": "chunkingStrategy"
                }
              },
              "required": [
                "file_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFile"
            }
          }
        }
      }
    },
    "/vector_stores/{vectorStoreId}/files/{fileId}": {
      "get": {
        "operationId": "GetVectorStoreFile",
        "description": "Retrieves a vector store file.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file being retrieved.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFile"
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteVectorStoreFile",
        "description": "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the delete file endpoint.",
        "parameters": [
          {
            "name": "vectorStoreId",
            "in": "path",
            "description": "The ID of the vector store that the file belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file to delete its relationship to the vector store.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/VectorStoreFileDeletionStatus"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AadCredential": {
      "type": "object",
      "description": "AAD Credential definition",
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredential"
        }
      ],
      "x-ms-discriminator-value": "AAD"
    },
    "ApiKeyCredential": {
      "type": "object",
      "description": "ApiKey Credential definition",
      "properties": {
        "apiKey": {
          "type": "string",
          "description": "API Key",
          "readOnly": true
        }
      },
      "required": [
        "apiKey"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredential"
        }
      ],
      "x-ms-discriminator-value": "ApiKey"
    },
    "ApiResponseFormat": {
      "type": "string",
      "description": "Possible API response formats.",
      "enum": [
        "text",
        "json_object"
      ],
      "x-ms-enum": {
        "name": "ApiResponseFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "text",
            "value": "text",
            "description": "`text` format should be used for requests involving any sort of ToolCall."
          },
          {
            "name": "jsonObject",
            "value": "json_object",
            "description": "Using `json_object` format will limit the usage of ToolCall to only functions."
          }
        ]
      }
    },
    "AppInsightsConfiguration": {
      "type": "object",
      "description": "Data Source for Application Insight.",
      "properties": {
        "connectionString": {
          "type": "string",
          "description": "Application Insight connection string."
        },
        "query": {
          "type": "string",
          "description": "Query to fetch data."
        }
      },
      "required": [
        "connectionString",
        "query"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/InputData"
        }
      ],
      "x-ms-discriminator-value": "app_insights"
    },
    "AssetBase": {
      "type": "object",
      "description": "Base definition for an asset.",
      "properties": {
        "isAnonymous": {
          "type": "boolean",
          "description": "If the name version are system generated (anonymous registration).",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "isArchived": {
          "type": "boolean",
          "description": "Is the asset archived?",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ResourceBase"
        }
      ]
    },
    "AssetContainer": {
      "type": "object",
      "description": "AssetContainer definition",
      "properties": {
        "isArchived": {
          "type": "boolean",
          "description": "Is the asset archived?",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "latestVersion": {
          "type": "string",
          "description": "The latest version inside this container.",
          "readOnly": true
        },
        "nextVersion": {
          "type": "string",
          "description": "The next auto incremental version",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ResourceBase"
        }
      ]
    },
    "AssetProvisioningState": {
      "type": "string",
      "description": "Asset Provisioning State Definition",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Creating",
        "Updating",
        "Deleting"
      ],
      "x-ms-enum": {
        "name": "AssetProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The operation succeeded."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The operation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "The operation was canceled."
          },
          {
            "name": "Creating",
            "value": "Creating",
            "description": "The operation is creating."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "The operation is updating."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "The operation is deleting."
          }
        ]
      }
    },
    "AssetReferenceBase": {
      "type": "object",
      "description": "Base definition for asset references.",
      "properties": {
        "referenceType": {
          "$ref": "#/definitions/ReferenceType",
          "description": "Asset reference type."
        }
      },
      "discriminator": "referenceType",
      "required": [
        "referenceType"
      ]
    },
    "AssetVersion": {
      "type": "object",
      "description": "AssetVersion Definition",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource Id: azureml://workspace/{workspaceName}/indexes/{name}/versions/{version} of the index.",
          "readOnly": true
        },
        "stage": {
          "type": "string",
          "description": "Update stage to 'Archive' to archive the asset. Default is Development, which means the asset is under development.",
          "default": "Development"
        },
        "description": {
          "type": "string",
          "description": "Description information of the asset."
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "Metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        },
        "tags": {
          "type": "object",
          "description": "Asset's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Asset's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "Assistant": {
      "type": "object",
      "description": "Represents an assistant that can call the model and use tools.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always assistant.",
          "enum": [
            "assistant"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "name": {
          "type": "string",
          "description": "The name of the assistant.",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "description": "The description of the assistant.",
          "x-nullable": true
        },
        "model": {
          "type": "string",
          "description": "The ID of the model to use."
        },
        "instructions": {
          "type": "string",
          "description": "The system instructions for the assistant to use.",
          "x-nullable": true
        },
        "tools": {
          "type": "array",
          "description": "The collection of tools enabled for the assistant.",
          "default": [],
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/ToolResources"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "The response format of the tool calls used by this assistant.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "name",
        "description",
        "model",
        "instructions",
        "tools",
        "tool_resources",
        "temperature",
        "top_p",
        "metadata"
      ]
    },
    "AssistantCreationOptions": {
      "type": "object",
      "description": "The request details to use when creating a new assistant.",
      "properties": {
        "model": {
          "type": "string",
          "description": "The ID of the model to use."
        },
        "name": {
          "type": "string",
          "description": "The name of the new assistant.",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "description": "The description of the new assistant.",
          "x-nullable": true
        },
        "instructions": {
          "type": "string",
          "description": "The system instructions for the new assistant to use.",
          "x-nullable": true
        },
        "tools": {
          "type": "array",
          "description": "The collection of tools to enable for the new assistant.",
          "default": [],
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/CreateToolResourcesOptions"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "The response format of the tool calls used by this assistant.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "model"
      ]
    },
    "AssistantDeletionStatus": {
      "type": "object",
      "description": "The status of an assistant deletion operation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'assistant.deleted'.",
          "enum": [
            "assistant.deleted"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "AssistantStreamEvent": {
      "type": "string",
      "description": "Each event in a server-sent events stream has an `event` and `data` property:\n\n```\nevent: thread.created\ndata: {\"id\": \"thread_123\", \"object\": \"thread\", ...}\n```\n\nWe emit events whenever a new object is created, transitions to a new state, or is being\nstreamed in parts (deltas). For example, we emit `thread.run.created` when a new run\nis created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses\nto create a message during a run, we emit a `thread.message.created event`, a\n`thread.message.in_progress` event, many `thread.message.delta` events, and finally a\n`thread.message.completed` event.\n\nWe may add additional events over time, so we recommend handling unknown events gracefully\nin your code.",
      "enum": [
        "thread.created",
        "thread.run.created",
        "thread.run.queued",
        "thread.run.in_progress",
        "thread.run.requires_action",
        "thread.run.completed",
        "thread.run.failed",
        "thread.run.cancelling",
        "thread.run.cancelled",
        "thread.run.expired",
        "thread.run.step.created",
        "thread.run.step.in_progress",
        "thread.run.step.delta",
        "thread.run.step.completed",
        "thread.run.step.failed",
        "thread.run.step.cancelled",
        "thread.run.step.expired",
        "thread.message.created",
        "thread.message.in_progress",
        "thread.message.delta",
        "thread.message.completed",
        "thread.message.incomplete",
        "error",
        "done"
      ],
      "x-ms-enum": {
        "name": "AssistantStreamEvent",
        "modelAsString": true,
        "values": [
          {
            "name": "ThreadCreated",
            "value": "thread.created",
            "description": "Event sent when a new thread is created. The data of this event is of type AssistantThread"
          },
          {
            "name": "ThreadRunCreated",
            "value": "thread.run.created",
            "description": "Event sent when a new run is created. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunQueued",
            "value": "thread.run.queued",
            "description": "Event sent when a run moves to `queued` status. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunInProgress",
            "value": "thread.run.in_progress",
            "description": "Event sent when a run moves to `in_progress` status. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunRequiresAction",
            "value": "thread.run.requires_action",
            "description": "Event sent when a run moves to `requires_action` status. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunCompleted",
            "value": "thread.run.completed",
            "description": "Event sent when a run is completed. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunFailed",
            "value": "thread.run.failed",
            "description": "Event sent when a run fails. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunCancelling",
            "value": "thread.run.cancelling",
            "description": "Event sent when a run moves to `cancelling` status. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunCancelled",
            "value": "thread.run.cancelled",
            "description": "Event sent when a run is cancelled. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunExpired",
            "value": "thread.run.expired",
            "description": "Event sent when a run is expired. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunStepCreated",
            "value": "thread.run.step.created",
            "description": "Event sent when a new thread run step is created. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepInProgress",
            "value": "thread.run.step.in_progress",
            "description": "Event sent when a run step moves to `in_progress` status. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepDelta",
            "value": "thread.run.step.delta",
            "description": "Event sent when a run step is being streamed. The data of this event is of type RunStepDeltaChunk"
          },
          {
            "name": "ThreadRunStepCompleted",
            "value": "thread.run.step.completed",
            "description": "Event sent when a run step is completed. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepFailed",
            "value": "thread.run.step.failed",
            "description": "Event sent when a run step fails. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepCancelled",
            "value": "thread.run.step.cancelled",
            "description": "Event sent when a run step is cancelled. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepExpired",
            "value": "thread.run.step.expired",
            "description": "Event sent when a run step is expired. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadMessageCreated",
            "value": "thread.message.created",
            "description": "Event sent when a new message is created. The data of this event is of type ThreadMessage"
          },
          {
            "name": "ThreadMessageInProgress",
            "value": "thread.message.in_progress",
            "description": "Event sent when a message moves to `in_progress` status. The data of this event is of type ThreadMessage"
          },
          {
            "name": "ThreadMessageDelta",
            "value": "thread.message.delta",
            "description": "Event sent when a message is being streamed. The data of this event is of type MessageDeltaChunk"
          },
          {
            "name": "ThreadMessageCompleted",
            "value": "thread.message.completed",
            "description": "Event sent when a message is completed. The data of this event is of type ThreadMessage"
          },
          {
            "name": "ThreadMessageIncomplete",
            "value": "thread.message.incomplete",
            "description": "Event sent before a message is completed. The data of this event is of type ThreadMessage"
          },
          {
            "name": "Error",
            "value": "error",
            "description": "Event sent when an error occurs, such as an internal server error or a timeout."
          },
          {
            "name": "Done",
            "value": "done",
            "description": "Event sent when the stream is done."
          }
        ]
      }
    },
    "AssistantThread": {
      "type": "object",
      "description": "Information about a single thread associated with an assistant.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread'.",
          "enum": [
            "thread"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/ToolResources"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "tool_resources",
        "metadata"
      ]
    },
    "AssistantThreadCreationOptions": {
      "type": "object",
      "description": "The details used to create a new assistant thread.",
      "properties": {
        "messages": {
          "type": "array",
          "description": "The initial messages to associate with the new thread.",
          "items": {
            "$ref": "#/definitions/ThreadMessageOptions"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/CreateToolResourcesOptions"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "AssistantsApiResponseFormat": {
      "type": "object",
      "description": "An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run. If `text` the model can return text or any value needed.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Must be one of `text` or `json_object`.",
          "default": "text",
          "enum": [
            "text",
            "json_object"
          ],
          "x-ms-enum": {
            "name": "ApiResponseFormat",
            "modelAsString": true,
            "values": [
              {
                "name": "text",
                "value": "text",
                "description": "`text` format should be used for requests involving any sort of ToolCall."
              },
              {
                "name": "jsonObject",
                "value": "json_object",
                "description": "Using `json_object` format will limit the usage of ToolCall to only functions."
              }
            ]
          }
        }
      }
    },
    "AssistantsApiResponseFormatMode": {
      "type": "string",
      "description": "Represents the mode in which the model will handle the return format of a tool call.",
      "enum": [
        "auto",
        "none"
      ],
      "x-ms-enum": {
        "name": "AssistantsApiResponseFormatMode",
        "modelAsString": true,
        "values": [
          {
            "name": "auto",
            "value": "auto",
            "description": "Default value. Let the model handle the return format."
          },
          {
            "name": "none",
            "value": "none",
            "description": "Setting the value to `none`, will result in a 400 Bad request."
          }
        ]
      }
    },
    "AssistantsApiResponseFormatOption": {},
    "AssistantsApiToolChoiceOption": {},
    "AssistantsApiToolChoiceOptionMode": {
      "type": "string",
      "description": "Specifies how the tool choice will be used",
      "enum": [
        "none",
        "auto"
      ],
      "x-ms-enum": {
        "name": "AssistantsApiToolChoiceOptionMode",
        "modelAsString": true,
        "values": [
          {
            "name": "none",
            "value": "none",
            "description": "The model will not call a function and instead generates a message."
          },
          {
            "name": "auto",
            "value": "auto",
            "description": "The model can pick between generating a message or calling a function."
          }
        ]
      }
    },
    "AssistantsNamedToolChoice": {
      "type": "object",
      "description": "Specifies a tool the model should use. Use to force the model to call a specific tool.",
      "properties": {
        "type": {
          "$ref": "#/definitions/AssistantsNamedToolChoiceType",
          "description": "the type of tool. If type is `function`, the function name must be set."
        },
        "function": {
          "$ref": "#/definitions/FunctionName",
          "description": "The name of the function to call"
        }
      },
      "required": [
        "type"
      ]
    },
    "AssistantsNamedToolChoiceType": {
      "type": "string",
      "description": "Available tool types for assistants named tools.",
      "enum": [
        "function",
        "code_interpreter",
        "file_search"
      ],
      "x-ms-enum": {
        "name": "AssistantsNamedToolChoiceType",
        "modelAsString": true,
        "values": [
          {
            "name": "function",
            "value": "function",
            "description": "Tool type `function`"
          },
          {
            "name": "codeInterpreter",
            "value": "code_interpreter",
            "description": "Tool type `code_interpreter`"
          },
          {
            "name": "fileSearch",
            "value": "file_search",
            "description": "Tool type `file_search`"
          }
        ]
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "BaseCredential": {
      "type": "object",
      "description": "Base Credential definition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Credential name",
          "readOnly": true
        },
        "type": {
          "$ref": "#/definitions/CredentialType"
        }
      },
      "discriminator": "type",
      "required": [
        "name",
        "type"
      ]
    },
    "BaseModel": {
      "type": "object",
      "description": "Base Model and prompt for evaluation.",
      "properties": {
        "model_config": {
          "type": "object",
          "description": "Base model for evaluation.",
          "additionalProperties": {
            "additionalProperties": {},
            "type": "object"
          }
        },
        "prompt": {
          "type": "string",
          "description": "System prompt to be used with base model. This property will hold prompt asset id."
        },
        "parameters": {
          "type": "object",
          "description": "parameters for evaluation.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "model_config",
        "prompt",
        "parameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/EvaluationTarget"
        }
      ],
      "x-ms-discriminator-value": "base_model"
    },
    "BatchDeployment": {
      "type": "object",
      "description": "Batch inference settings per deployment.",
      "properties": {
        "compute": {
          "type": "string",
          "description": "Compute target for batch inference operation."
        },
        "deploymentConfiguration": {
          "$ref": "#/definitions/BatchDeploymentConfiguration",
          "description": "Properties relevant to different deployment types."
        },
        "errorThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "Error threshold, if the error count for the entire input goes above this value, the batch inference will be aborted. Range is [-1, int.MaxValue]. For FileDataset, this value is the count of file failures. For TabularDataset, this value is the count of record failures. If set to -1 (the lower bound), all failures during batch inference will be ignored.",
          "default": -1
        },
        "loggingLevel": {
          "$ref": "#/definitions/BatchLoggingLevel",
          "description": "Logging level for batch inference operation."
        },
        "maxConcurrencyPerInstance": {
          "type": "integer",
          "format": "int32",
          "description": "Indicates maximum number of parallelism per instance.",
          "default": 1
        },
        "miniBatchSize": {
          "type": "integer",
          "format": "int64",
          "description": "Size of the mini-batch passed to each batch invocation. For FileDataset, this is the number of files per mini-batch. For TabularDataset, this is the size of the records in bytes, per mini-batch.",
          "default": 10
        },
        "model": {
          "$ref": "#/definitions/AssetReferenceBase",
          "description": "Reference to the model asset for the endpoint deployment."
        },
        "outputAction": {
          "$ref": "#/definitions/BatchOutputAction",
          "description": "Indicates how the output will be organized."
        },
        "outputFileName": {
          "type": "string",
          "description": "Customized output file name for append_row output action.",
          "default": "predictions.csv"
        },
        "provisioningState": {
          "$ref": "#/definitions/DeploymentProvisioningState",
          "description": "Provisioning state for the endpoint deployment.",
          "readOnly": true
        },
        "resources": {
          "$ref": "#/definitions/DeploymentResourceConfiguration",
          "description": "Indicates compute configuration for the job. If not provided, will default to the defaults defined in ResourceConfiguration."
        },
        "retrySettings": {
          "$ref": "#/definitions/BatchRetrySettings",
          "description": "Retry Settings for the batch inference operation. If not provided, will default to the defaults defined in BatchRetrySettings."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/EndpointDeploymentBase"
        }
      ]
    },
    "BatchDeploymentConfiguration": {
      "type": "object",
      "description": "Properties relevant to different deployment types.",
      "properties": {
        "deploymentConfigurationType": {
          "$ref": "#/definitions/BatchDeploymentConfigurationType",
          "description": "The batch deployment configuration type."
        }
      },
      "discriminator": "deploymentConfigurationType",
      "required": [
        "deploymentConfigurationType"
      ]
    },
    "BatchDeploymentConfigurationType": {
      "type": "string",
      "description": "The enumerated property types for batch deployments.",
      "enum": [
        "Model",
        "PipelineComponent"
      ],
      "x-ms-enum": {
        "name": "BatchDeploymentConfigurationType",
        "modelAsString": true,
        "values": [
          {
            "name": "Model",
            "value": "Model",
            "description": "Model"
          },
          {
            "name": "PipelineComponent",
            "value": "PipelineComponent",
            "description": "PipelineComponent"
          }
        ]
      }
    },
    "BatchEndpoint": {
      "type": "object",
      "description": "Batch endpoint configuration.",
      "properties": {
        "defaults": {
          "$ref": "#/definitions/BatchEndpointDefaults",
          "description": "Default values for Batch Endpoint"
        },
        "provisioningState": {
          "$ref": "#/definitions/EndpointProvisioningState",
          "description": "Provisioning state for the endpoint.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/EndpointBase"
        }
      ]
    },
    "BatchEndpointDefaults": {
      "type": "object",
      "description": "Batch endpoint default values",
      "properties": {
        "deploymentName": {
          "type": "string",
          "description": "Name of the deployment that will be default for the endpoint. This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked."
        }
      }
    },
    "BatchLoggingLevel": {
      "type": "string",
      "description": "Log verbosity for batch inferencing. Increasing verbosity order for logging is : Warning, Info and Debug. The default value is Info.",
      "enum": [
        "Info",
        "Warning",
        "Debug"
      ],
      "x-ms-enum": {
        "name": "BatchLoggingLevel",
        "modelAsString": true,
        "values": [
          {
            "name": "Info",
            "value": "Info",
            "description": "Info level logging."
          },
          {
            "name": "Warning",
            "value": "Warning",
            "description": "Warning level logging."
          },
          {
            "name": "Debug",
            "value": "Debug",
            "description": "Debug level logging."
          }
        ]
      }
    },
    "BatchOutputAction": {
      "type": "string",
      "description": "Enum to determine how batch inferencing will handle output",
      "enum": [
        "SummaryOnly",
        "AppendRow"
      ],
      "x-ms-enum": {
        "name": "BatchOutputAction",
        "modelAsString": true,
        "values": [
          {
            "name": "SummaryOnly",
            "value": "SummaryOnly",
            "description": "SummaryOnly"
          },
          {
            "name": "AppendRow",
            "value": "AppendRow",
            "description": "AppendRow"
          }
        ]
      }
    },
    "BatchRetrySettings": {
      "type": "object",
      "description": "Retry settings for a batch inference operation.",
      "properties": {
        "maxRetries": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum retry count for a mini-batch",
          "default": 3
        },
        "timeout": {
          "type": "string",
          "format": "duration",
          "description": "Invocation timeout for a mini-batch, in ISO 8601 format."
        }
      }
    },
    "CodeConfiguration": {
      "type": "object",
      "description": "Configuration for a scoring code asset.",
      "properties": {
        "codeId": {
          "type": "string",
          "description": "ARM resource ID of the code asset.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "scoringScript": {
          "type": "string",
          "description": "[Required] The script to execute on startup. eg. 'score.py'",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "required": [
        "scoringScript"
      ]
    },
    "CodeInterpreterToolDefinition": {
      "type": "object",
      "description": "The input definition information for a code interpreter tool as used to configure an assistant.",
      "allOf": [
        {
          "$ref": "#/definitions/ToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "code_interpreter"
    },
    "CodeInterpreterToolResource": {
      "type": "object",
      "description": "A set of resources that are used by the `code_interpreter` tool.",
      "properties": {
        "file_ids": {
          "type": "array",
          "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "default": [],
          "maxItems": 20,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "fileIds"
        }
      },
      "required": [
        "file_ids"
      ]
    },
    "Collection": {
      "type": "object",
      "description": "Collection definition.",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "The msi client id used to collect logging to blob storage. If it's null,backend will pick a registered endpoint identity to auth."
        },
        "dataCollectionMode": {
          "$ref": "#/definitions/DataCollectionMode",
          "description": "Enable or disable data collection."
        },
        "dataId": {
          "type": "string",
          "description": "The data asset arm resource id. Client side will ensure data asset is pointing to the blob storage, and backend will collect data to the blob storage."
        },
        "samplingRate": {
          "type": "number",
          "format": "double",
          "description": "The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data by default.",
          "default": 1
        }
      }
    },
    "Connection": {
      "type": "object",
      "description": "Connection Definition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the connection",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of connection, such as AzureOpenAI, AIServices, AISearch, etc.",
          "readOnly": true
        },
        "target": {
          "type": "string",
          "description": "The URL endpoint of the external resource being connected to."
        },
        "credentials": {
          "$ref": "#/definitions/BaseCredential",
          "description": "Credential used to connect to the external resource."
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "Metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "type",
        "target",
        "credentials"
      ]
    },
    "ContainerType": {
      "type": "string",
      "description": "Container types.",
      "enum": [
        "StorageInitializer",
        "InferenceServer"
      ],
      "x-ms-enum": {
        "name": "ContainerType",
        "modelAsString": true,
        "values": [
          {
            "name": "StorageInitializer",
            "value": "StorageInitializer",
            "description": "StorageInitializer"
          },
          {
            "name": "InferenceServer",
            "value": "InferenceServer",
            "description": "InferenceServer"
          }
        ]
      }
    },
    "CreateAndRunThreadOptions": {
      "type": "object",
      "description": "The details used when creating and immediately running a new assistant thread.",
      "properties": {
        "assistant_id": {
          "type": "string",
          "description": "The ID of the assistant for which the thread should be created.",
          "x-ms-client-name": "assistantId"
        },
        "thread": {
          "$ref": "#/definitions/AssistantThreadCreationOptions",
          "description": "The details used to create the new thread. If no thread is provided, an empty one will be created."
        },
        "model": {
          "type": "string",
          "description": "The overridden model that the assistant should use to run the thread.",
          "x-nullable": true
        },
        "instructions": {
          "type": "string",
          "description": "The overridden system instructions the assistant should use to run the thread.",
          "x-nullable": true
        },
        "tools": {
          "type": "array",
          "description": "The overridden list of enabled tools the assistant should use to run the thread.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "type": "object",
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/UpdateToolResourcesOptions"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "stream": {
          "type": "boolean",
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events,\nterminating when the Run enters a terminal state with a `data: [DONE]` message."
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output\nmore random, while lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model\nconsiders the results of the tokens with top_p probability mass. So 0.1 means only the tokens\ncomprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only\nthe number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,\nthe run will end with status `incomplete`. See `incomplete_details` for more info.",
          "x-nullable": true,
          "x-ms-client-name": "maxPromptTokens"
        },
        "max_completion_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only\nthe number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens\nspecified, the run will end with status `incomplete`. See `incomplete_details` for more info.",
          "x-nullable": true,
          "x-ms-client-name": "maxCompletionTokens"
        },
        "truncation_strategy": {
          "type": "object",
          "description": "The strategy to use for dropping messages as the context windows moves forward.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/TruncationObject"
            }
          ],
          "x-ms-client-name": "truncationStrategy"
        },
        "tool_choice": {
          "$ref": "#/definitions/AssistantsApiToolChoiceOption",
          "description": "Controls whether or not and which tool is called by the model.",
          "x-nullable": true,
          "x-ms-client-name": "toolChoice"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "Specifies the format that the model must output.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "assistant_id"
      ]
    },
    "CreateCodeInterpreterToolResourceOptions": {
      "type": "object",
      "description": "A set of resources that will be used by the `code_interpreter` tool. Request object.",
      "properties": {
        "file_ids": {
          "type": "array",
          "description": "A list of file IDs made available to the `code_interpreter` tool.",
          "default": [],
          "maxItems": 20,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "fileIds"
        }
      }
    },
    "CreateFileSearchToolResourceOptions": {},
    "CreateFileSearchToolResourceVectorStoreOptions": {
      "type": "object",
      "description": "File IDs associated to the vector store to be passed to the helper.",
      "properties": {
        "file_ids": {
          "type": "array",
          "description": "A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.",
          "maxItems": 10000,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "fileIds"
        },
        "chunking_strategy": {
          "$ref": "#/definitions/VectorStoreChunkingStrategyRequest",
          "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
          "x-ms-client-name": "chunkingStrategy"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "file_ids",
        "chunking_strategy"
      ]
    },
    "CreateRunOptions": {
      "type": "object",
      "description": "The details used when creating a new run of an assistant thread.",
      "properties": {
        "assistant_id": {
          "type": "string",
          "description": "The ID of the assistant that should run the thread.",
          "x-ms-client-name": "assistantId"
        },
        "model": {
          "type": "string",
          "description": "The overridden model name that the assistant should use to run the thread.",
          "x-nullable": true
        },
        "instructions": {
          "type": "string",
          "description": "The overridden system instructions that the assistant should use to run the thread.",
          "x-nullable": true
        },
        "additional_instructions": {
          "type": "string",
          "description": "Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior\non a per-run basis without overriding other instructions.",
          "x-nullable": true,
          "x-ms-client-name": "additionalInstructions"
        },
        "additional_messages": {
          "type": "array",
          "description": "Adds additional messages to the thread before creating the run.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/ThreadMessage"
          },
          "x-ms-client-name": "additionalMessages"
        },
        "tools": {
          "type": "array",
          "description": "The overridden list of enabled tools that the assistant should use to run the thread.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "stream": {
          "type": "boolean",
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events,\nterminating when the Run enters a terminal state with a `data: [DONE]` message."
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output\nmore random, while lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model\nconsiders the results of the tokens with top_p probability mass. So 0.1 means only the tokens\ncomprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only\nthe number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,\nthe run will end with status `incomplete`. See `incomplete_details` for more info.",
          "x-nullable": true,
          "x-ms-client-name": "maxPromptTokens"
        },
        "max_completion_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort\nto use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of\ncompletion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.",
          "x-nullable": true,
          "x-ms-client-name": "maxCompletionTokens"
        },
        "truncation_strategy": {
          "type": "object",
          "description": "The strategy to use for dropping messages as the context windows moves forward.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/TruncationObject"
            }
          ],
          "x-ms-client-name": "truncationStrategy"
        },
        "tool_choice": {
          "$ref": "#/definitions/AssistantsApiToolChoiceOption",
          "description": "Controls whether or not and which tool is called by the model.",
          "x-nullable": true,
          "x-ms-client-name": "toolChoice"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "Specifies the format that the model must output.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "assistant_id"
      ]
    },
    "CreateToolResourcesOptions": {
      "type": "object",
      "description": "Request object. A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "properties": {
        "code_interpreter": {
          "$ref": "#/definitions/CreateCodeInterpreterToolResourceOptions",
          "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "x-ms-client-name": "codeInterpreter"
        },
        "file_search": {
          "$ref": "#/definitions/CreateFileSearchToolResourceOptions",
          "description": "A list of vector stores or their IDs made available to the `file_search` tool.",
          "x-ms-client-name": "fileSearch"
        }
      }
    },
    "CredentialType": {
      "type": "string",
      "description": "The different Credential types",
      "enum": [
        "ApiKey",
        "AAD",
        "SAS"
      ],
      "x-ms-enum": {
        "name": "CredentialType",
        "modelAsString": true,
        "values": [
          {
            "name": "ApiKey",
            "value": "ApiKey"
          },
          {
            "name": "AAD",
            "value": "AAD"
          },
          {
            "name": "SAS",
            "value": "SAS"
          }
        ]
      }
    },
    "DataCollectionMode": {
      "type": "string",
      "description": "Data collection mode",
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "x-ms-enum": {
        "name": "DataCollectionMode",
        "modelAsString": true,
        "values": [
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "Enabled"
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "Disabled"
          }
        ]
      }
    },
    "DataCollector": {
      "type": "object",
      "description": "Data collector definition.",
      "properties": {
        "collections": {
          "type": "object",
          "description": "[Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string. Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.",
          "additionalProperties": {
            "$ref": "#/definitions/Collection"
          }
        },
        "requestLogging": {
          "$ref": "#/definitions/RequestLogging",
          "description": "The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional."
        },
        "rollingRate": {
          "$ref": "#/definitions/RollingRateType",
          "description": "When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file. If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/. If it's day, all data will be collected in blob path /yyyy/MM/dd/. The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly."
        }
      },
      "required": [
        "collections"
      ]
    },
    "DataContainer": {
      "type": "object",
      "description": "DataContainer Definition",
      "properties": {
        "dataType": {
          "$ref": "#/definitions/DataType",
          "description": "[Required] Specifies the type of data",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "discriminator": "dataType",
      "required": [
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetContainer"
        }
      ]
    },
    "DataPathAssetReference": {
      "type": "object",
      "description": "Reference to an asset via its path in a datastore.",
      "properties": {
        "datastoreId": {
          "type": "string",
          "description": "ARM resource ID of the datastore where the asset is located."
        },
        "path": {
          "type": "string",
          "description": "The path of the file/directory in the datastore."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AssetReferenceBase"
        }
      ],
      "x-ms-discriminator-value": "DataPath"
    },
    "DataType": {
      "type": "string",
      "description": "Enum to determine the type of data.",
      "enum": [
        "uri_file",
        "uri_folder"
      ],
      "x-ms-enum": {
        "name": "DataType",
        "modelAsString": true,
        "values": [
          {
            "name": "uri_file",
            "value": "uri_file",
            "description": "URI file."
          },
          {
            "name": "uri_folder",
            "value": "uri_folder",
            "description": "URI folder."
          }
        ]
      }
    },
    "DataVersionBase": {
      "type": "object",
      "description": "DataVersionBase Definition",
      "properties": {
        "dataUri": {
          "type": "string",
          "description": "[Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "dataType": {
          "$ref": "#/definitions/DataType",
          "description": "Data type"
        }
      },
      "discriminator": "dataType",
      "required": [
        "dataUri",
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetBase"
        }
      ]
    },
    "Dataset": {
      "type": "object",
      "description": "Dataset as source for evaluation.",
      "allOf": [
        {
          "$ref": "#/definitions/InputData"
        }
      ],
      "x-ms-discriminator-value": "dataset"
    },
    "DeploymentLogs": {
      "type": "object",
      "description": "Deployment logs.",
      "properties": {
        "content": {
          "type": "string",
          "description": "The retrieved online deployment logs."
        }
      }
    },
    "DeploymentLogsRequest": {
      "type": "object",
      "description": "Request to get deployment logs.",
      "properties": {
        "containerType": {
          "$ref": "#/definitions/ContainerType",
          "description": "The type of container to retrieve logs from."
        },
        "tail": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of lines to tail."
        }
      }
    },
    "DeploymentProvisioningState": {
      "type": "string",
      "description": "Possible values for DeploymentProvisioningState.",
      "enum": [
        "Creating",
        "Deleting",
        "Scaling",
        "Updating",
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "DeploymentProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Creating",
            "value": "Creating",
            "description": "The endpoint is being created."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "The endpoint is being deleted."
          },
          {
            "name": "Scaling",
            "value": "Scaling",
            "description": "The endpoint is being scaled."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "The endpoint is being updated."
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The endpoint provisioning succeeded."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The endpoint provisioning failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "The endpoint provisioning was canceled."
          }
        ]
      }
    },
    "DeploymentResourceConfiguration": {
      "type": "object",
      "description": "Deployment resource configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceConfiguration"
        }
      ]
    },
    "DestinationAsset": {
      "type": "object",
      "description": "Publishing destination registry asset information",
      "properties": {
        "destinationName": {
          "type": "string",
          "description": "Destination asset name"
        },
        "destinationVersion": {
          "type": "string",
          "description": "Destination asset version"
        },
        "registryName": {
          "type": "string",
          "description": "Destination registry name"
        }
      }
    },
    "DoneEvent": {
      "type": "string",
      "description": "Terminal event indicating the successful end of a stream.",
      "enum": [
        "done"
      ],
      "x-ms-enum": {
        "name": "DoneEvent",
        "modelAsString": true,
        "values": [
          {
            "name": "Done",
            "value": "done",
            "description": "Event sent when the stream is done."
          }
        ]
      }
    },
    "EgressPublicNetworkAccessType": {
      "type": "string",
      "description": "Enum to determine whether PublicNetworkAccess is Enabled or Disabled for egress of a deployment.",
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "x-ms-enum": {
        "name": "EgressPublicNetworkAccessType",
        "modelAsString": true,
        "values": [
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "PublicNetworkAccess is enabled for egress."
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "PublicNetworkAccess is disabled for egress."
          }
        ]
      }
    },
    "EndpointAuthKeys": {
      "type": "object",
      "description": "Keys for endpoint authentication.",
      "properties": {
        "primaryKey": {
          "type": "string",
          "description": "The primary key.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "secondaryKey": {
          "type": "string",
          "description": "The secondary key.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      }
    },
    "EndpointAuthMode": {
      "type": "string",
      "description": "Enum to determine endpoint authentication mode.",
      "enum": [
        "AMLToken",
        "Key",
        "AADToken"
      ],
      "x-ms-enum": {
        "name": "EndpointAuthMode",
        "modelAsString": true,
        "values": [
          {
            "name": "AMLToken",
            "value": "AMLToken",
            "description": "AMLToken"
          },
          {
            "name": "Key",
            "value": "Key",
            "description": "Key"
          },
          {
            "name": "AADToken",
            "value": "AADToken",
            "description": "AADToken"
          }
        ]
      }
    },
    "EndpointAuthToken": {
      "type": "object",
      "description": "Service Token",
      "properties": {
        "accessToken": {
          "type": "string",
          "description": "Access token for endpoint authentication."
        },
        "expiryTimeUtc": {
          "type": "integer",
          "format": "int64",
          "description": "Access token expiry time (UTC)."
        },
        "refreshAfterTimeUtc": {
          "type": "integer",
          "format": "int64",
          "description": "Refresh access token after time (UTC)."
        },
        "tokenType": {
          "type": "string",
          "description": "Access token type."
        }
      }
    },
    "EndpointBase": {
      "type": "object",
      "description": "Inference Endpoint base definition",
      "properties": {
        "authMode": {
          "$ref": "#/definitions/EndpointAuthMode",
          "description": "[Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does."
        },
        "description": {
          "type": "string",
          "description": "Description of the inference endpoint."
        },
        "keys": {
          "$ref": "#/definitions/EndpointAuthKeys",
          "description": "EndpointAuthKeys to set initially on an Endpoint. This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.",
          "x-ms-mutability": [
            "create"
          ]
        },
        "properties": {
          "type": "object",
          "description": "Property dictionary. Properties can be added, but not removed or altered.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scoringUri": {
          "type": "string",
          "format": "uri",
          "description": "Endpoint URI.",
          "readOnly": true
        },
        "swaggerUri": {
          "type": "string",
          "format": "uri",
          "description": "Endpoint Swagger URI.",
          "readOnly": true
        }
      },
      "required": [
        "authMode"
      ]
    },
    "EndpointComputeType": {
      "type": "string",
      "description": "Enum to determine endpoint compute type.",
      "enum": [
        "Managed",
        "Kubernetes",
        "AzureMLCompute"
      ],
      "x-ms-enum": {
        "name": "EndpointComputeType",
        "modelAsString": true,
        "values": [
          {
            "name": "Managed",
            "value": "Managed",
            "description": "Managed"
          },
          {
            "name": "Kubernetes",
            "value": "Kubernetes",
            "description": "Kubernetes"
          },
          {
            "name": "AzureMLCompute",
            "value": "AzureMLCompute",
            "description": "AzureMLCompute"
          }
        ]
      }
    },
    "EndpointDeploymentBase": {
      "type": "object",
      "description": "Base definition for endpoint deployment.",
      "properties": {
        "codeConfiguration": {
          "$ref": "#/definitions/CodeConfiguration",
          "description": "Code configuration for the endpoint deployment."
        },
        "description": {
          "type": "string",
          "description": "Description of the endpoint deployment."
        },
        "environmentId": {
          "type": "string",
          "description": "ARM resource ID or AssetId of the environment specification for the endpoint deployment."
        },
        "environmentVariables": {
          "type": "object",
          "description": "Environment variables configuration for the deployment.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Property dictionary. Properties can be added, but not removed or altered.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EndpointProvisioningState": {
      "type": "string",
      "description": "State of endpoint provisioning.",
      "enum": [
        "Creating",
        "Deleting",
        "Succeeded",
        "Failed",
        "Updating",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "EndpointProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Creating",
            "value": "Creating",
            "description": "The endpoint is being created."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "The endpoint is being deleted."
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The endpoint provisioning succeeded."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The endpoint provisioning failed."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "The endpoint is being updated."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "The endpoint provisioning was canceled."
          }
        ]
      }
    },
    "ErrorEvent": {
      "type": "string",
      "description": "Terminal event indicating a server side error while streaming.",
      "enum": [
        "error"
      ],
      "x-ms-enum": {
        "name": "ErrorEvent",
        "modelAsString": true,
        "values": [
          {
            "name": "Error",
            "value": "error",
            "description": "Event sent when an error occurs, such as an internal server error or a timeout."
          }
        ]
      }
    },
    "Evaluation": {
      "type": "object",
      "description": "Evaluation Definition",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluation."
        },
        "data": {
          "$ref": "#/definitions/InputData",
          "description": "Data for evaluation."
        },
        "displayName": {
          "type": "string",
          "description": "Update stage to 'Archive' to archive the asset. Default is Development, which means the asset is under development."
        },
        "description": {
          "type": "string",
          "description": "Description of the evaluation. It can be used to store additional information about the evaluation and is mutable."
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "Metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "Status of the evaluation. It is set by service and is read-only.",
          "readOnly": true
        },
        "tags": {
          "type": "object",
          "description": "Evaluation's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "evaluators": {
          "type": "object",
          "description": "Evaluators to be used for the evaluation.",
          "additionalProperties": {
            "$ref": "#/definitions/EvaluatorConfiguration"
          }
        },
        "evaluationTarget": {
          "$ref": "#/definitions/EvaluationTarget",
          "description": "Evaluation Target."
        }
      },
      "required": [
        "data",
        "evaluators"
      ]
    },
    "EvaluationTarget": {
      "type": "object",
      "description": "Evaluation Target.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminator property for EvaluationTarget."
        },
        "name": {
          "type": "string",
          "description": "Name of the evaluation target."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "EvaluatorConfiguration": {
      "type": "object",
      "description": "Evaluator Configuration",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the evaluator."
        },
        "initParams": {
          "type": "object",
          "description": "Initialization parameters of the evaluator.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dataMapping": {
          "type": "object",
          "description": "Data parameters of the evaluator.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "FileDeletionStatus": {
      "type": "object",
      "description": "A status response from a file deletion operation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'file'.",
          "enum": [
            "file"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "FileListResponse": {
      "type": "object",
      "description": "The response data from a file list operation.",
      "properties": {
        "object": {
          "type": "string",
          "description": "The object type, which is always 'list'.",
          "enum": [
            "list"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "data": {
          "type": "array",
          "description": "The files returned for the request.",
          "items": {
            "$ref": "#/definitions/OpenAIFile"
          }
        }
      },
      "required": [
        "object",
        "data"
      ]
    },
    "FilePurpose": {
      "type": "string",
      "description": "The possible values denoting the intended usage of a file.",
      "enum": [
        "fine-tune",
        "fine-tune-results",
        "assistants",
        "assistants_output",
        "batch",
        "batch_output",
        "vision"
      ],
      "x-ms-enum": {
        "name": "FilePurpose",
        "modelAsString": true,
        "values": [
          {
            "name": "fineTune",
            "value": "fine-tune",
            "description": "Indicates a file is used for fine tuning input."
          },
          {
            "name": "fineTuneResults",
            "value": "fine-tune-results",
            "description": "Indicates a file is used for fine tuning results."
          },
          {
            "name": "assistants",
            "value": "assistants",
            "description": "Indicates a file is used as input to assistants."
          },
          {
            "name": "assistantsOutput",
            "value": "assistants_output",
            "description": "Indicates a file is used as output by assistants."
          },
          {
            "name": "batch",
            "value": "batch",
            "description": "Indicates a file is used as input to batch operations."
          },
          {
            "name": "batchOutput",
            "value": "batch_output",
            "description": "Indicates a file is used as output by a vector store batch operation."
          },
          {
            "name": "vision",
            "value": "vision",
            "description": "Indicates a file is used as input to a vision operation."
          }
        ]
      }
    },
    "FileSearchToolDefinition": {
      "type": "object",
      "description": "The input definition information for a file search tool as used to configure an assistant.",
      "properties": {
        "file_search": {
          "$ref": "#/definitions/FileSearchToolDefinitionDetails",
          "description": "Options overrides for the file search tool.",
          "x-ms-client-name": "fileSearch"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "file_search"
    },
    "FileSearchToolDefinitionDetails": {
      "type": "object",
      "description": "Options overrides for the file search tool.",
      "properties": {
        "max_num_results": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of results the file search tool should output. The default is 20 for gpt-4* models and 5 for gpt-3.5-turbo. This number should be between 1 and 50 inclusive. Note that the file search tool may output fewer than `max_num_results` results. See the file search tool documentation for more information.",
          "minimum": 1,
          "maximum": 50,
          "x-ms-client-name": "maxNumResults"
        }
      }
    },
    "FileSearchToolResource": {
      "type": "object",
      "description": "A set of resources that are used by the `file_search` tool.",
      "properties": {
        "vector_store_ids": {
          "type": "array",
          "description": "The ID of the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
          "maxItems": 1,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "vectorStoreIds"
        }
      }
    },
    "FileState": {
      "type": "string",
      "description": "The state of the file.",
      "enum": [
        "uploaded",
        "pending",
        "running",
        "processed",
        "error",
        "deleting",
        "deleted"
      ],
      "x-ms-enum": {
        "name": "FileState",
        "modelAsString": true,
        "values": [
          {
            "name": "uploaded",
            "value": "uploaded",
            "description": "The file has been uploaded but it's not yet processed. This state is not returned by Azure OpenAI and exposed only for compatibility. It can be categorized as an inactive state."
          },
          {
            "name": "pending",
            "value": "pending",
            "description": "The operation was created and is not queued to be processed in the future. It can be categorized as an inactive state."
          },
          {
            "name": "running",
            "value": "running",
            "description": "The operation has started to be processed. It can be categorized as an active state."
          },
          {
            "name": "processed",
            "value": "processed",
            "description": "The operation has successfully processed and is ready for consumption. It can be categorized as a terminal state."
          },
          {
            "name": "error",
            "value": "error",
            "description": "The operation has completed processing with a failure and cannot be further consumed. It can be categorized as a terminal state."
          },
          {
            "name": "deleting",
            "value": "deleting",
            "description": "The entity is in the process to be deleted. This state is not returned by Azure OpenAI and exposed only for compatibility. It can be categorized as an active state."
          },
          {
            "name": "deleted",
            "value": "deleted",
            "description": "The entity has been deleted but may still be referenced by other entities predating the deletion. It can be categorized as a terminal state."
          }
        ]
      }
    },
    "FlavorData": {
      "type": "object",
      "description": "Flavor Data Definition",
      "properties": {
        "data": {
          "type": "object",
          "description": "Model flavor-specific data.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "FunctionDefinition": {
      "type": "object",
      "description": "The input definition information for a function.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function to be called."
        },
        "description": {
          "type": "string",
          "description": "A description of what the function does, used by the model to choose when and how to call the function."
        },
        "parameters": {
          "description": "The parameters the functions accepts, described as a JSON Schema object."
        }
      },
      "required": [
        "name",
        "parameters"
      ]
    },
    "FunctionName": {
      "type": "object",
      "description": "The function name that will be used, if using the `function` tool",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function to call"
        }
      },
      "required": [
        "name"
      ]
    },
    "FunctionToolDefinition": {
      "type": "object",
      "description": "The input definition information for a function tool as used to configure an assistant.",
      "properties": {
        "function": {
          "$ref": "#/definitions/FunctionDefinition",
          "description": "The definition of the concrete function that the function tool should call."
        }
      },
      "required": [
        "function"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ToolDefinition"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "IdAssetReference": {
      "type": "object",
      "description": "Reference to an asset via its ARM resource ID.",
      "properties": {
        "assetId": {
          "type": "string",
          "description": "[Required] ARM resource ID of the asset.",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]"
        }
      },
      "required": [
        "assetId"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetReferenceBase"
        }
      ],
      "x-ms-discriminator-value": "Id"
    },
    "IncompleteRunDetails": {
      "type": "string",
      "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
      "enum": [
        "max_completion_tokens",
        "max_prompt_tokens"
      ],
      "x-ms-enum": {
        "name": "IncompleteRunDetails",
        "modelAsString": true,
        "values": [
          {
            "name": "maxCompletionTokens",
            "value": "max_completion_tokens",
            "description": "Maximum completion tokens exceeded"
          },
          {
            "name": "maxPromptTokens",
            "value": "max_prompt_tokens",
            "description": "Maximum prompt tokens exceeded"
          }
        ]
      }
    },
    "Index": {
      "type": "object",
      "description": "Index resource Definition",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource Id: azureml://workspace/{workspaceName}/indexes/{name}/versions/{version} of the index.",
          "readOnly": true
        },
        "stage": {
          "type": "string",
          "description": "Update stage to 'Archive' to archive the asset. Default is Development, which means the asset is under development.",
          "default": "Development"
        },
        "description": {
          "type": "string",
          "description": "Description information of the asset."
        },
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "Metadata containing createdBy and modifiedBy information.",
          "readOnly": true
        },
        "tags": {
          "type": "object",
          "description": "Asset's tags. Unlike properties, tags are fully mutable.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "description": "Asset's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "storageUri": {
          "type": "string",
          "description": "Default workspace blob storage Uri. Should work across storage types and auth scenarios."
        }
      },
      "required": [
        "id",
        "storageUri"
      ]
    },
    "InputData": {
      "type": "object",
      "description": "Abstract data class.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Discriminator property for InputData."
        },
        "id": {
          "type": "string",
          "description": "Evaluation input data"
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "id"
      ]
    },
    "KeyType": {
      "type": "string",
      "description": "Type of key (Primary or Secondary).",
      "enum": [
        "Primary",
        "Secondary"
      ],
      "x-ms-enum": {
        "name": "KeyType",
        "modelAsString": true,
        "values": [
          {
            "name": "Primary",
            "value": "Primary",
            "description": "Primary key."
          },
          {
            "name": "Secondary",
            "value": "Secondary",
            "description": "Secondary key."
          }
        ]
      }
    },
    "ListSortOrder": {
      "type": "string",
      "description": "The available sorting options when requesting a list of response objects.",
      "enum": [
        "asc",
        "desc"
      ],
      "x-ms-enum": {
        "name": "ListSortOrder",
        "modelAsString": true,
        "values": [
          {
            "name": "ascending",
            "value": "asc",
            "description": "Specifies an ascending sort order."
          },
          {
            "name": "descending",
            "value": "desc",
            "description": "Specifies a descending sort order."
          }
        ]
      }
    },
    "ListViewType": {
      "type": "string",
      "description": "List View Type Definition",
      "enum": [
        "ActiveOnly",
        "ArchivedOnly",
        "All"
      ],
      "x-ms-enum": {
        "name": "ListViewType",
        "modelAsString": true,
        "values": [
          {
            "name": "ActiveOnly",
            "value": "ActiveOnly",
            "description": "List only active items."
          },
          {
            "name": "ArchivedOnly",
            "value": "ArchivedOnly",
            "description": "List only archived items."
          },
          {
            "name": "All",
            "value": "All",
            "description": "List all items."
          }
        ]
      }
    },
    "ManagedServiceIdentityType": {
      "type": "string",
      "description": "Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
      "enum": [
        "None",
        "SystemAssigned",
        "UserAssigned",
        "SystemAssigned,UserAssigned"
      ],
      "x-ms-enum": {
        "name": "ManagedServiceIdentityType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "None",
            "description": "No managed service identity."
          },
          {
            "name": "SystemAssigned",
            "value": "SystemAssigned",
            "description": "SystemAssigned identity"
          },
          {
            "name": "UserAssigned",
            "value": "UserAssigned",
            "description": "UserAssigned identity."
          },
          {
            "name": "SystemAssigned,UserAssigned",
            "value": "SystemAssigned,UserAssigned",
            "description": "SystemAssigned and UserAssigned identity."
          }
        ]
      }
    },
    "MessageAttachment": {
      "type": "object",
      "description": "This describes to which tools a file has been attached.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file to attach to the message.",
          "x-ms-client-name": "fileId"
        },
        "tools": {
          "type": "array",
          "description": "The tools to add to this file.",
          "items": {
            "$ref": "#/definitions/MessageAttachmentToolDefinition"
          }
        }
      },
      "required": [
        "file_id",
        "tools"
      ]
    },
    "MessageAttachmentToolDefinition": {
      "x-nullable": false
    },
    "MessageContent": {
      "type": "object",
      "description": "An abstract representation of a single item of thread message content.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "MessageDelta": {
      "type": "object",
      "description": "Represents the typed 'delta' payload within a streaming message delta chunk.",
      "properties": {
        "role": {
          "$ref": "#/definitions/MessageRole",
          "description": "The entity that produced the message."
        },
        "content": {
          "type": "array",
          "description": "The content of the message as an array of text and/or images.",
          "items": {
            "$ref": "#/definitions/MessageDeltaContent"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "role",
        "content"
      ]
    },
    "MessageDeltaChunk": {
      "type": "object",
      "description": "Represents a message delta i.e. any changed fields on a message during streaming.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of the message, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `thread.message.delta`.",
          "enum": [
            "thread.message.delta"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "delta": {
          "$ref": "#/definitions/MessageDelta",
          "description": "The delta containing the fields that have changed on the Message."
        }
      },
      "required": [
        "id",
        "object",
        "delta"
      ]
    },
    "MessageDeltaContent": {
      "type": "object",
      "description": "The abstract base representation of a partial streamed message content payload.",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the content part of the message."
        },
        "type": {
          "type": "string",
          "description": "The type of content for this content part."
        }
      },
      "discriminator": "type",
      "required": [
        "index",
        "type"
      ]
    },
    "MessageDeltaImageFileContent": {
      "type": "object",
      "description": "Represents a streamed image file content part within a streaming message delta chunk.",
      "properties": {
        "image_file": {
          "$ref": "#/definitions/MessageDeltaImageFileContentObject",
          "description": "The image_file data.",
          "x-ms-client-name": "imageFile"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MessageDeltaContent"
        }
      ],
      "x-ms-discriminator-value": "image_file"
    },
    "MessageDeltaImageFileContentObject": {
      "type": "object",
      "description": "Represents the 'image_file' payload within streaming image file content.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The file ID of the image in the message content.",
          "x-ms-client-name": "fileId"
        }
      }
    },
    "MessageDeltaTextAnnotation": {
      "type": "object",
      "description": "The abstract base representation of a streamed text content part's text annotation.",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the annotation within a text content part."
        },
        "type": {
          "type": "string",
          "description": "The type of the text content annotation."
        }
      },
      "discriminator": "type",
      "required": [
        "index",
        "type"
      ]
    },
    "MessageDeltaTextContent": {
      "type": "object",
      "description": "Represents the data of a streamed text content part within a streaming message delta chunk.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The data that makes up the text."
        },
        "annotations": {
          "type": "array",
          "description": "Annotations for the text.",
          "items": {
            "$ref": "#/definitions/MessageDeltaTextAnnotation"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "MessageDeltaTextContentObject": {
      "type": "object",
      "description": "Represents a streamed text content part within a streaming message delta chunk.",
      "properties": {
        "text": {
          "$ref": "#/definitions/MessageDeltaTextContent",
          "description": "The text content details."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MessageDeltaContent"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "MessageDeltaTextFileCitationAnnotation": {
      "type": "object",
      "description": "Represents the data of a streamed file citation as applied to a streaming text content part.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the specific file the citation is from.",
          "x-ms-client-name": "fileId"
        },
        "quote": {
          "type": "string",
          "description": "The specific quote in the cited file."
        }
      }
    },
    "MessageDeltaTextFileCitationAnnotationObject": {
      "type": "object",
      "description": "Represents a streamed file citation applied to a streaming text content part.",
      "properties": {
        "file_citation": {
          "$ref": "#/definitions/MessageDeltaTextFileCitationAnnotation",
          "description": "The file citation information.",
          "x-ms-client-name": "fileCitation"
        },
        "text": {
          "type": "string",
          "description": "The text in the message content that needs to be replaced."
        },
        "start_index": {
          "type": "integer",
          "format": "int32",
          "description": "The start index of this annotation in the content text.",
          "x-ms-client-name": "startIndex"
        },
        "end_index": {
          "type": "integer",
          "format": "int32",
          "description": "The end index of this annotation in the content text.",
          "x-ms-client-name": "endIndex"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MessageDeltaTextAnnotation"
        }
      ],
      "x-ms-discriminator-value": "file_citation"
    },
    "MessageDeltaTextFilePathAnnotation": {
      "type": "object",
      "description": "Represents the data of a streamed file path annotation as applied to a streaming text content part.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The file ID for the annotation.",
          "x-ms-client-name": "fileId"
        }
      }
    },
    "MessageDeltaTextFilePathAnnotationObject": {
      "type": "object",
      "description": "Represents a streamed file path annotation applied to a streaming text content part.",
      "properties": {
        "file_path": {
          "$ref": "#/definitions/MessageDeltaTextFilePathAnnotation",
          "description": "The file path information.",
          "x-ms-client-name": "filePath"
        },
        "start_index": {
          "type": "integer",
          "format": "int32",
          "description": "The start index of this annotation in the content text.",
          "x-ms-client-name": "startIndex"
        },
        "end_index": {
          "type": "integer",
          "format": "int32",
          "description": "The end index of this annotation in the content text.",
          "x-ms-client-name": "endIndex"
        },
        "text": {
          "type": "string",
          "description": "The text in the message content that needs to be replaced."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MessageDeltaTextAnnotation"
        }
      ],
      "x-ms-discriminator-value": "file_path"
    },
    "MessageDeltaTextUrlCitationDetails": {
      "type": "object",
      "description": "A representation of the URL used for the text citation.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL where the citation is from."
        },
        "title": {
          "type": "string",
          "description": "The title of the URL."
        }
      }
    },
    "MessageImageFileContent": {
      "type": "object",
      "description": "A representation of image file content in a thread message.",
      "properties": {
        "image_file": {
          "$ref": "#/definitions/MessageImageFileDetails",
          "description": "The image file for this thread message content item.",
          "x-ms-client-name": "imageFile"
        }
      },
      "required": [
        "image_file"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "image_file"
    },
    "MessageImageFileDetails": {
      "type": "object",
      "description": "An image reference, as represented in thread message content.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID for the file associated with this image.",
          "x-ms-client-name": "fileId"
        }
      },
      "required": [
        "file_id"
      ]
    },
    "MessageIncompleteDetails": {
      "type": "object",
      "description": "Information providing additional detail about a message entering an incomplete status.",
      "properties": {
        "reason": {
          "$ref": "#/definitions/MessageIncompleteDetailsReason",
          "description": "The provided reason describing why the message was marked as incomplete."
        }
      },
      "required": [
        "reason"
      ]
    },
    "MessageIncompleteDetailsReason": {
      "type": "string",
      "description": "A set of reasons describing why a message is marked as incomplete.",
      "enum": [
        "content_filter",
        "max_tokens",
        "run_cancelled",
        "run_failed",
        "run_expired"
      ],
      "x-ms-enum": {
        "name": "MessageIncompleteDetailsReason",
        "modelAsString": true,
        "values": [
          {
            "name": "contentFilter",
            "value": "content_filter",
            "description": "The run generating the message was terminated due to content filter flagging."
          },
          {
            "name": "maxTokens",
            "value": "max_tokens",
            "description": "The run generating the message exhausted available tokens before completion."
          },
          {
            "name": "runCancelled",
            "value": "run_cancelled",
            "description": "The run generating the message was cancelled before completion."
          },
          {
            "name": "runFailed",
            "value": "run_failed",
            "description": "The run generating the message failed."
          },
          {
            "name": "runExpired",
            "value": "run_expired",
            "description": "The run generating the message expired."
          }
        ]
      }
    },
    "MessageRole": {
      "type": "string",
      "description": "The possible values for roles attributed to messages in a thread.",
      "enum": [
        "user",
        "assistant"
      ],
      "x-ms-enum": {
        "name": "MessageRole",
        "modelAsString": true,
        "values": [
          {
            "name": "user",
            "value": "user",
            "description": "The role representing the end-user."
          },
          {
            "name": "assistant",
            "value": "assistant",
            "description": "The role representing the assistant."
          }
        ]
      }
    },
    "MessageStatus": {
      "type": "string",
      "description": "The possible execution status values for a thread message.",
      "enum": [
        "in_progress",
        "incomplete",
        "completed"
      ],
      "x-ms-enum": {
        "name": "MessageStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "A run is currently creating this message."
          },
          {
            "name": "incomplete",
            "value": "incomplete",
            "description": "This message is incomplete. See incomplete_details for more information."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "This message was successfully completed by a run."
          }
        ]
      }
    },
    "MessageStreamEvent": {
      "type": "string",
      "description": "Message operation related streaming events",
      "enum": [
        "thread.message.created",
        "thread.message.in_progress",
        "thread.message.delta",
        "thread.message.completed",
        "thread.message.incomplete"
      ],
      "x-ms-enum": {
        "name": "MessageStreamEvent",
        "modelAsString": true,
        "values": [
          {
            "name": "ThreadMessageCreated",
            "value": "thread.message.created",
            "description": "Event sent when a new message is created. The data of this event is of type ThreadMessage"
          },
          {
            "name": "ThreadMessageInProgress",
            "value": "thread.message.in_progress",
            "description": "Event sent when a message moves to `in_progress` status. The data of this event is of type ThreadMessage"
          },
          {
            "name": "ThreadMessageDelta",
            "value": "thread.message.delta",
            "description": "Event sent when a message is being streamed. The data of this event is of type MessageDeltaChunk"
          },
          {
            "name": "ThreadMessageCompleted",
            "value": "thread.message.completed",
            "description": "Event sent when a message is completed. The data of this event is of type ThreadMessage"
          },
          {
            "name": "ThreadMessageIncomplete",
            "value": "thread.message.incomplete",
            "description": "Event sent before a message is completed. The data of this event is of type ThreadMessage"
          }
        ]
      }
    },
    "MessageTextAnnotation": {
      "type": "object",
      "description": "An abstract representation of an annotation to text thread message content.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        },
        "text": {
          "type": "string",
          "description": "The textual content associated with this text annotation item."
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "text"
      ]
    },
    "MessageTextContent": {
      "type": "object",
      "description": "A representation of a textual item of thread message content.",
      "properties": {
        "text": {
          "$ref": "#/definitions/MessageTextDetails",
          "description": "The text and associated annotations for this thread message content item."
        }
      },
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageContent"
        }
      ],
      "x-ms-discriminator-value": "text"
    },
    "MessageTextDetails": {
      "type": "object",
      "description": "The text and associated annotations for a single item of assistant thread message content.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The text data."
        },
        "annotations": {
          "type": "array",
          "description": "A list of annotations associated with this text.",
          "items": {
            "$ref": "#/definitions/MessageTextAnnotation"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value",
        "annotations"
      ]
    },
    "MessageTextFileCitationAnnotation": {
      "type": "object",
      "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the 'file_search' tool to search files.",
      "properties": {
        "file_citation": {
          "$ref": "#/definitions/MessageTextFileCitationDetails",
          "description": "A citation within the message that points to a specific quote from a specific file.\nGenerated when the assistant uses the \"file_search\" tool to search files.",
          "x-ms-client-name": "fileCitation"
        },
        "start_index": {
          "type": "integer",
          "format": "int32",
          "description": "The first text index associated with this text annotation.",
          "x-ms-client-name": "startIndex"
        },
        "end_index": {
          "type": "integer",
          "format": "int32",
          "description": "The last text index associated with this text annotation.",
          "x-ms-client-name": "endIndex"
        }
      },
      "required": [
        "file_citation"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageTextAnnotation"
        }
      ],
      "x-ms-discriminator-value": "file_citation"
    },
    "MessageTextFileCitationDetails": {
      "type": "object",
      "description": "A representation of a file-based text citation, as used in a file-based annotation of text thread message content.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file associated with this citation.",
          "x-ms-client-name": "fileId"
        },
        "quote": {
          "type": "string",
          "description": "The specific quote cited in the associated file."
        }
      },
      "required": [
        "file_id",
        "quote"
      ]
    },
    "MessageTextFilePathAnnotation": {
      "type": "object",
      "description": "A citation within the message that points to a file located at a specific path.",
      "properties": {
        "file_path": {
          "$ref": "#/definitions/MessageTextFilePathDetails",
          "description": "A URL for the file that's generated when the assistant used the code_interpreter tool to generate a file.",
          "x-ms-client-name": "filePath"
        },
        "start_index": {
          "type": "integer",
          "format": "int32",
          "description": "The first text index associated with this text annotation.",
          "x-ms-client-name": "startIndex"
        },
        "end_index": {
          "type": "integer",
          "format": "int32",
          "description": "The last text index associated with this text annotation.",
          "x-ms-client-name": "endIndex"
        }
      },
      "required": [
        "file_path"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/MessageTextAnnotation"
        }
      ],
      "x-ms-discriminator-value": "file_path"
    },
    "MessageTextFilePathDetails": {
      "type": "object",
      "description": "An encapsulation of an image file ID, as used by message image content.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the specific file that the citation is from.",
          "x-ms-client-name": "fileId"
        }
      },
      "required": [
        "file_id"
      ]
    },
    "ModelContainer": {
      "type": "object",
      "description": "Model Container Definition",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/AssetProvisioningState",
          "description": "Provisioning state for the model container.",
          "readOnly": true
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AssetContainer"
        }
      ]
    },
    "ModelVersion": {
      "type": "object",
      "description": "Model Version Definition",
      "properties": {
        "flavors": {
          "type": "object",
          "description": "Mapping of model flavors to their properties.",
          "additionalProperties": {
            "$ref": "#/definitions/FlavorData"
          }
        },
        "jobName": {
          "type": "string",
          "description": "Name of the training job which produced this model."
        },
        "modelType": {
          "type": "string",
          "description": "The storage format for this entity. Used for NCD."
        },
        "modelUri": {
          "type": "string",
          "description": "The URI path to the model contents."
        },
        "provisioningState": {
          "$ref": "#/definitions/AssetProvisioningState",
          "description": "Provisioning state for the model version.",
          "readOnly": true
        },
        "stage": {
          "type": "string",
          "description": "Stage in the model lifecycle assigned to this model."
        }
      },
      "required": [
        "provisioningState"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/AssetBase"
        }
      ]
    },
    "OnlineDeployment": {
      "type": "object",
      "description": "Online deployment definition.",
      "properties": {
        "appInsightsEnabled": {
          "type": "boolean",
          "description": "If true, enables Application Insights logging."
        },
        "dataCollector": {
          "$ref": "#/definitions/DataCollector",
          "description": "The mdc configuration, we disable mdc when it's null."
        },
        "egressPublicNetworkAccess": {
          "$ref": "#/definitions/EgressPublicNetworkAccessType",
          "description": "If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled."
        },
        "instanceType": {
          "type": "string",
          "description": "Compute instance type.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "livenessProbe": {
          "$ref": "#/definitions/ProbeSettings",
          "description": "Liveness probe monitors the health of the container regularly."
        },
        "model": {
          "type": "string",
          "description": "The URI path to the model."
        },
        "modelMountPath": {
          "type": "string",
          "description": "The path to mount the model in custom container."
        },
        "provisioningState": {
          "$ref": "#/definitions/DeploymentProvisioningState",
          "description": "Provisioning state for the endpoint deployment.",
          "readOnly": true
        },
        "readinessProbe": {
          "$ref": "#/definitions/ProbeSettings",
          "description": "Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe."
        },
        "requestSettings": {
          "$ref": "#/definitions/OnlineRequestSettings",
          "description": "Request settings for the deployment."
        },
        "scaleSettings": {
          "$ref": "#/definitions/OnlineScaleSettings",
          "description": "Scale settings for the deployment. If it is null or not provided, it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment and to DefaultScaleSettings for ManagedOnlineDeployment."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/EndpointDeploymentBase"
        }
      ]
    },
    "OnlineEndpoint": {
      "type": "object",
      "description": "Online endpoint definition.",
      "properties": {
        "compute": {
          "type": "string",
          "description": "ARM resource ID of the compute if it exists. optional"
        },
        "mirrorTraffic": {
          "type": "object",
          "description": "Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        },
        "provisioningState": {
          "$ref": "#/definitions/EndpointProvisioningState",
          "description": "Provisioning state for the endpoint.",
          "readOnly": true
        },
        "publicNetworkAccess": {
          "$ref": "#/definitions/PublicNetworkAccessType",
          "description": "Set to 'Enabled' for endpoints that should allow public access when Private Link is enabled."
        },
        "traffic": {
          "type": "object",
          "description": "Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.",
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/EndpointBase"
        }
      ]
    },
    "OnlineRequestSettings": {
      "type": "object",
      "description": "Online deployment scoring requests configuration.",
      "properties": {
        "maxConcurrentRequestsPerInstance": {
          "type": "integer",
          "format": "int32",
          "description": "The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.",
          "default": 1
        },
        "maxQueueWait": {
          "type": "string",
          "format": "duration",
          "description": "(Deprecated for Managed Online Endpoints) The maximum amount of time a request will stay in the queue in ISO 8601 format. Defaults to 500ms. (Now increase `request_timeout_ms` to account for any networking/queue delays)"
        },
        "requestTimeout": {
          "type": "string",
          "format": "duration",
          "description": "The scoring timeout in ISO 8601 format. Defaults to 5000ms."
        }
      }
    },
    "OnlineScaleSettings": {
      "type": "object",
      "description": "Online deployment scaling configuration.",
      "properties": {
        "scaleType": {
          "$ref": "#/definitions/ScaleType",
          "description": "The scale type for the deployment."
        }
      },
      "discriminator": "scaleType",
      "required": [
        "scaleType"
      ]
    },
    "OpenAIFile": {
      "type": "object",
      "description": "Represents an assistant that can call the model and use tools.",
      "properties": {
        "object": {
          "type": "string",
          "description": "The object type, which is always 'file'.",
          "enum": [
            "file"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "bytes": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the file, in bytes."
        },
        "filename": {
          "type": "string",
          "description": "The name of the file."
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "purpose": {
          "$ref": "#/definitions/FilePurpose",
          "description": "The intended purpose of a file."
        },
        "status": {
          "$ref": "#/definitions/FileState",
          "description": "The state of the file. This field is available in Azure OpenAI only."
        },
        "status_details": {
          "type": "string",
          "description": "The error message with details in case processing of this file failed. This field is available in Azure OpenAI only.",
          "x-ms-client-name": "statusDetails"
        }
      },
      "required": [
        "object",
        "id",
        "bytes",
        "filename",
        "created_at",
        "purpose"
      ]
    },
    "OrderString": {
      "type": "string",
      "description": "The type of ordering to use",
      "enum": [
        "CreatedAtDesc",
        "CreatedAtAsc",
        "UpdatedAtDesc",
        "UpdatedAtAsc"
      ],
      "x-ms-enum": {
        "name": "OrderString",
        "modelAsString": true,
        "values": [
          {
            "name": "CreatedAtDesc",
            "value": "CreatedAtDesc",
            "description": "Sort creation date/time in descending order."
          },
          {
            "name": "CreatedAtAsc",
            "value": "CreatedAtAsc",
            "description": "Sort creation date/time in ascending order."
          },
          {
            "name": "UpdatedAtDesc",
            "value": "UpdatedAtDesc",
            "description": "Sort updated at date/time in descending order."
          },
          {
            "name": "UpdatedAtAsc",
            "value": "UpdatedAtAsc",
            "description": "Sort updated at date/time in ascending order."
          }
        ]
      }
    },
    "OutputPathAssetReference": {
      "type": "object",
      "description": "Reference to an asset via its path in a job output.",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "ARM resource ID of the job."
        },
        "path": {
          "type": "string",
          "description": "The path of the file/directory in the job output."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AssetReferenceBase"
        }
      ],
      "x-ms-discriminator-value": "OutputPath"
    },
    "PagedBatchDeployment": {
      "type": "object",
      "description": "Paged collection of BatchDeployment items.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of Batch Deployments.",
          "items": {
            "$ref": "#/definitions/BatchDeployment"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedBatchEndpoint": {
      "type": "object",
      "description": "Paged collection of BatchEndpoint items.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of Batch Endpoints.",
          "items": {
            "$ref": "#/definitions/BatchEndpoint"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedConnection": {
      "type": "object",
      "description": "Paged collection of Connection items.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of Connections.",
          "items": {
            "$ref": "#/definitions/Connection"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDataContainer": {
      "type": "object",
      "description": "PagedDataContainer Definition",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of DataContainers.",
          "items": {
            "$ref": "#/definitions/DataContainer"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of results, if any."
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedDataVersionBase": {
      "type": "object",
      "description": "PagedDataVersionBase Definition",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of DataVersions.",
          "items": {
            "$ref": "#/definitions/DataVersionBase"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of results, if any."
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedEvaluation": {
      "type": "object",
      "description": "Paged evaluation items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of Evaluations.",
          "items": {
            "$ref": "#/definitions/Evaluation"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedIndex": {
      "type": "object",
      "description": "Paged collection of IndexVersion items.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of Indexes.",
          "items": {
            "$ref": "#/definitions/Index"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedModelVersion": {
      "type": "object",
      "description": "Paged collection of ModelVersion items.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of model versions.",
          "items": {
            "$ref": "#/definitions/ModelVersion"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedOnlineDeployment": {
      "type": "object",
      "description": "Paged collection of OnlineDeployment items.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of Online Deployments.",
          "items": {
            "$ref": "#/definitions/OnlineDeployment"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedOnlineEndpoint": {
      "type": "object",
      "description": "Paged collection of OnlineEndpoint items.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of Online Endpoints.",
          "items": {
            "$ref": "#/definitions/OnlineEndpoint"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PartialBatchDeployment": {
      "type": "object",
      "description": "Mutable batch inference settings per deployment.",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the endpoint deployment."
        }
      }
    },
    "PartialBatchDeploymentPartialMinimalTrackedResourceWithProperties": {
      "type": "object",
      "description": "Strictly used in update requests.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/PartialBatchDeployment",
          "description": "Additional attributes of the entity."
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PartialManagedServiceIdentity": {
      "type": "object",
      "description": "Managed service identity (system assigned and/or user assigned identities)",
      "properties": {
        "type": {
          "$ref": "#/definitions/ManagedServiceIdentityType",
          "description": "Managed service identity (system assigned and/or user assigned identities)"
        },
        "userAssignedIdentities": {
          "type": "object",
          "description": "The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
          "additionalProperties": {
            "additionalProperties": {},
            "type": "object"
          }
        }
      }
    },
    "PartialMinimalTrackedResource": {
      "type": "object",
      "description": "Strictly used in update requests.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PartialMinimalTrackedResourceWithIdentity": {
      "type": "object",
      "description": "Strictly used in update requests.",
      "properties": {
        "identity": {
          "$ref": "#/definitions/PartialManagedServiceIdentity",
          "description": "Managed service identity (system assigned and/or user assigned identities)"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PartialMinimalTrackedResource"
        }
      ]
    },
    "PartialMinimalTrackedResourceWithSku": {
      "type": "object",
      "description": "Strictly used in update requests.",
      "properties": {
        "sku": {
          "$ref": "#/definitions/PartialSku",
          "description": "Sku details required for ARM contract for Autoscaling."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PartialMinimalTrackedResource"
        }
      ]
    },
    "PartialSku": {
      "type": "object",
      "description": "Common SKU definition.",
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted."
        },
        "family": {
          "type": "string",
          "description": "If the service has different generations of hardware, for the same SKU, then that can be captured here."
        },
        "name": {
          "type": "string",
          "description": "The name of the SKU. Ex - P3. It is typically a letter+number code."
        },
        "size": {
          "type": "string",
          "description": "The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code."
        },
        "tier": {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/SkuTier",
          "description": "This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT."
        }
      }
    },
    "ProbeSettings": {
      "type": "object",
      "description": "Deployment container liveness/readiness probe configuration.",
      "properties": {
        "failureThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The number of failures to allow before returning an unhealthy status.",
          "default": 30
        },
        "initialDelay": {
          "type": "string",
          "format": "duration",
          "description": "The delay before the first probe in ISO 8601 format."
        },
        "period": {
          "type": "string",
          "format": "duration",
          "description": "The length of time between probes in ISO 8601 format."
        },
        "successThreshold": {
          "type": "integer",
          "format": "int32",
          "description": "The number of successful probes before returning a healthy status.",
          "default": 1
        },
        "timeout": {
          "type": "string",
          "format": "duration",
          "description": "The probe timeout in ISO 8601 format."
        }
      }
    },
    "PublicNetworkAccessType": {
      "type": "string",
      "description": "Enum to determine whether PublicNetworkAccess is Enabled or Disabled.",
      "enum": [
        "Enabled",
        "Disabled"
      ],
      "x-ms-enum": {
        "name": "PublicNetworkAccessType",
        "modelAsString": true,
        "values": [
          {
            "name": "Enabled",
            "value": "Enabled",
            "description": "PublicNetworkAccess is enabled."
          },
          {
            "name": "Disabled",
            "value": "Disabled",
            "description": "PublicNetworkAccess is disabled."
          }
        ]
      }
    },
    "ReferenceType": {
      "type": "string",
      "description": "Enum to determine which reference method to use for an asset.",
      "enum": [
        "Id",
        "DataPath",
        "OutputPath"
      ],
      "x-ms-enum": {
        "name": "ReferenceType",
        "modelAsString": true,
        "values": [
          {
            "name": "Id",
            "value": "Id",
            "description": "Id"
          },
          {
            "name": "DataPath",
            "value": "DataPath",
            "description": "DataPath"
          },
          {
            "name": "OutputPath",
            "value": "OutputPath",
            "description": "OutputPath"
          }
        ]
      }
    },
    "RegenerateEndpointKeysRequest": {
      "type": "object",
      "description": "Request to regenerate endpoint keys.",
      "properties": {
        "keyType": {
          "$ref": "#/definitions/KeyType",
          "description": "[Required] Specification for which type of key to generate. Primary or Secondary."
        },
        "keyValue": {
          "type": "string",
          "description": "The value the key is set to."
        }
      },
      "required": [
        "keyType"
      ]
    },
    "RequestLogging": {
      "type": "object",
      "description": "Definition for RequestLogging.",
      "properties": {
        "captureHeaders": {
          "type": "array",
          "description": "For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RequiredAction": {
      "type": "object",
      "description": "An abstract representation of a required action for an assistant thread run to continue.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "RequiredFunctionToolCall": {
      "type": "object",
      "description": "A representation of a requested call to a function tool, needed by the model to continue evaluation of a run.",
      "properties": {
        "function": {
          "$ref": "#/definitions/RequiredFunctionToolCallDetails",
          "description": "Detailed information about the function to be executed by the tool that includes name and arguments."
        }
      },
      "required": [
        "function"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RequiredToolCall"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "RequiredFunctionToolCallDetails": {
      "type": "object",
      "description": "The detailed information for a function invocation, as provided by a required action invoking a function tool, that includes the name of and arguments to the function.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function."
        },
        "arguments": {
          "type": "string",
          "description": "The arguments to use when invoking the named function, as provided by the model. Arguments are presented as a JSON document that should be validated and parsed for evaluation."
        }
      },
      "required": [
        "name",
        "arguments"
      ]
    },
    "RequiredToolCall": {
      "type": "object",
      "description": "An abstract representation a a tool invocation needed by the model to continue a run.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type for the required tool call."
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call. This ID must be referenced when submitting tool outputs."
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "id"
      ]
    },
    "ResourceBase": {
      "type": "object",
      "description": "ResourceBase definition",
      "properties": {
        "description": {
          "type": "string",
          "description": "The asset description text."
        },
        "properties": {
          "type": "object",
          "description": "The asset property dictionary.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tags": {
          "type": "object",
          "description": "Tag dictionary. Tags can be added, removed, and updated.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceConfiguration": {
      "type": "object",
      "description": "Resource configuration.",
      "properties": {
        "instanceCount": {
          "type": "integer",
          "format": "int32",
          "description": "Optional number of instances or nodes used by the compute target.",
          "default": 1,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "instanceType": {
          "type": "string",
          "description": "Optional type of VM used as supported by the compute target.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "type": "object",
          "description": "Additional properties bag.",
          "additionalProperties": {
            "additionalProperties": {},
            "type": "object"
          },
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      }
    },
    "RollingRateType": {
      "type": "string",
      "description": "Rolling rate type",
      "enum": [
        "Year",
        "Month",
        "Day",
        "Hour",
        "Minute"
      ],
      "x-ms-enum": {
        "name": "RollingRateType",
        "modelAsString": true,
        "values": [
          {
            "name": "Year",
            "value": "Year",
            "description": "Year"
          },
          {
            "name": "Month",
            "value": "Month",
            "description": "Month"
          },
          {
            "name": "Day",
            "value": "Day",
            "description": "Day"
          },
          {
            "name": "Hour",
            "value": "Hour",
            "description": "Hour"
          },
          {
            "name": "Minute",
            "value": "Minute",
            "description": "Minute"
          }
        ]
      }
    },
    "RunCompletionUsage": {
      "type": "object",
      "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
      "properties": {
        "completion_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of completion tokens used over the course of the run.",
          "x-ms-client-name": "completionTokens"
        },
        "prompt_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of prompt tokens used over the course of the run.",
          "x-ms-client-name": "promptTokens"
        },
        "total_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of tokens used (prompt + completion).",
          "x-ms-client-name": "totalTokens"
        }
      },
      "required": [
        "completion_tokens",
        "prompt_tokens",
        "total_tokens"
      ]
    },
    "RunError": {
      "type": "object",
      "description": "The details of an error as encountered by an assistant thread run.",
      "properties": {
        "code": {
          "type": "string",
          "description": "The status for the error."
        },
        "message": {
          "type": "string",
          "description": "The human-readable text associated with the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "RunStatus": {
      "type": "string",
      "description": "Possible values for the status of an assistant thread run.",
      "enum": [
        "queued",
        "in_progress",
        "requires_action",
        "cancelling",
        "cancelled",
        "failed",
        "completed",
        "expired"
      ],
      "x-ms-enum": {
        "name": "RunStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "queued",
            "value": "queued",
            "description": "Represents a run that is queued to start."
          },
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "Represents a run that is in progress."
          },
          {
            "name": "requiresAction",
            "value": "requires_action",
            "description": "Represents a run that needs another operation, such as tool output submission, to continue."
          },
          {
            "name": "cancelling",
            "value": "cancelling",
            "description": "Represents a run that is in the process of cancellation."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "Represents a run that has been cancelled."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "Represents a run that failed."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "Represents a run that successfully completed."
          },
          {
            "name": "expired",
            "value": "expired",
            "description": "Represents a run that expired before it could otherwise finish."
          }
        ]
      }
    },
    "RunStep": {
      "type": "object",
      "description": "Detailed information about a single step of an assistant thread run.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread.run.step'.",
          "enum": [
            "thread.run.step"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "type": {
          "$ref": "#/definitions/RunStepType",
          "description": "The type of run step, which can be either message_creation or tool_calls."
        },
        "assistant_id": {
          "type": "string",
          "description": "The ID of the assistant associated with the run step.",
          "x-ms-client-name": "assistantId"
        },
        "thread_id": {
          "type": "string",
          "description": "The ID of the thread that was run.",
          "x-ms-client-name": "threadId"
        },
        "run_id": {
          "type": "string",
          "description": "The ID of the run that this run step is a part of.",
          "x-ms-client-name": "runId"
        },
        "status": {
          "$ref": "#/definitions/RunStepStatus",
          "description": "The status of this run step."
        },
        "step_details": {
          "$ref": "#/definitions/RunStepDetails",
          "description": "The details for this run step.",
          "x-ms-client-name": "stepDetails"
        },
        "last_error": {
          "type": "object",
          "description": "If applicable, information about the last error encountered by this run step.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RunStepError"
            }
          ],
          "x-ms-client-name": "lastError"
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "expired_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this item expired.",
          "x-nullable": true,
          "x-ms-client-name": "expiredAt"
        },
        "completed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this completed.",
          "x-nullable": true,
          "x-ms-client-name": "completedAt"
        },
        "cancelled_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this was cancelled.",
          "x-nullable": true,
          "x-ms-client-name": "cancelledAt"
        },
        "failed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this failed.",
          "x-nullable": true,
          "x-ms-client-name": "failedAt"
        },
        "usage": {
          "type": "object",
          "description": "Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RunStepCompletionUsage"
            }
          ]
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "type",
        "assistant_id",
        "thread_id",
        "run_id",
        "status",
        "step_details",
        "last_error",
        "created_at",
        "expired_at",
        "completed_at",
        "cancelled_at",
        "failed_at",
        "metadata"
      ]
    },
    "RunStepCodeInterpreterImageOutput": {
      "type": "object",
      "description": "A representation of an image output emitted by a code interpreter tool in response to a tool call by the model.",
      "properties": {
        "image": {
          "$ref": "#/definitions/RunStepCodeInterpreterImageReference",
          "description": "Referential information for the image associated with this output."
        }
      },
      "required": [
        "image"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepCodeInterpreterToolCallOutput"
        }
      ],
      "x-ms-discriminator-value": "image"
    },
    "RunStepCodeInterpreterImageReference": {
      "type": "object",
      "description": "An image reference emitted by a code interpreter tool in response to a tool call by the model.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The ID of the file associated with this image.",
          "x-ms-client-name": "fileId"
        }
      },
      "required": [
        "file_id"
      ]
    },
    "RunStepCodeInterpreterLogOutput": {
      "type": "object",
      "description": "A representation of a log output emitted by a code interpreter tool in response to a tool call by the model.",
      "properties": {
        "logs": {
          "type": "string",
          "description": "The serialized log output emitted by the code interpreter."
        }
      },
      "required": [
        "logs"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepCodeInterpreterToolCallOutput"
        }
      ],
      "x-ms-discriminator-value": "logs"
    },
    "RunStepCodeInterpreterToolCall": {
      "type": "object",
      "description": "A record of a call to a code interpreter tool, issued by the model in evaluation of a defined tool, that represents inputs and outputs consumed and emitted by the code interpreter.",
      "properties": {
        "code_interpreter": {
          "$ref": "#/definitions/RunStepCodeInterpreterToolCallDetails",
          "description": "The details of the tool call to the code interpreter tool.",
          "x-ms-client-name": "codeInterpreter"
        }
      },
      "required": [
        "code_interpreter"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepToolCall"
        }
      ],
      "x-ms-discriminator-value": "code_interpreter"
    },
    "RunStepCodeInterpreterToolCallDetails": {
      "type": "object",
      "description": "The detailed information about a code interpreter invocation by the model.",
      "properties": {
        "input": {
          "type": "string",
          "description": "The input provided by the model to the code interpreter tool."
        },
        "outputs": {
          "type": "array",
          "description": "The outputs produced by the code interpreter tool back to the model in response to the tool call.",
          "items": {
            "$ref": "#/definitions/RunStepCodeInterpreterToolCallOutput"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "input",
        "outputs"
      ]
    },
    "RunStepCodeInterpreterToolCallOutput": {
      "type": "object",
      "description": "An abstract representation of an emitted output from a code interpreter tool.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "RunStepCompletionUsage": {
      "type": "object",
      "description": "Usage statistics related to the run step.",
      "properties": {
        "completion_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of completion tokens used over the course of the run step.",
          "x-ms-client-name": "completionTokens"
        },
        "prompt_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Number of prompt tokens used over the course of the run step.",
          "x-ms-client-name": "promptTokens"
        },
        "total_tokens": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of tokens used (prompt + completion).",
          "x-ms-client-name": "totalTokens"
        }
      },
      "required": [
        "completion_tokens",
        "prompt_tokens",
        "total_tokens"
      ]
    },
    "RunStepDelta": {
      "type": "object",
      "description": "Represents the delta payload in a streaming run step delta chunk.",
      "properties": {
        "step_details": {
          "$ref": "#/definitions/RunStepDeltaDetail",
          "description": "The details of the run step.",
          "x-ms-client-name": "stepDetails"
        }
      }
    },
    "RunStepDeltaChunk": {
      "type": "object",
      "description": "Represents a run step delta i.e. any changed fields on a run step during streaming.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of the run step, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `thread.run.step.delta`.",
          "enum": [
            "thread.run.step.delta"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "delta": {
          "$ref": "#/definitions/RunStepDelta",
          "description": "The delta containing the fields that have changed on the run step."
        }
      },
      "required": [
        "id",
        "object",
        "delta"
      ]
    },
    "RunStepDeltaCodeInterpreterDetailItemObject": {
      "type": "object",
      "description": "Represents the Code Interpreter tool call data in a streaming run step's tool calls.",
      "properties": {
        "input": {
          "type": "string",
          "description": "The input into the Code Interpreter tool call."
        },
        "outputs": {
          "type": "array",
          "description": "The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.",
          "items": {
            "$ref": "#/definitions/RunStepDeltaCodeInterpreterOutput"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "RunStepDeltaCodeInterpreterImageOutput": {
      "type": "object",
      "description": "Represents an image output as produced the Code interpreter tool and as represented in a streaming run step's delta tool calls collection.",
      "properties": {
        "image": {
          "$ref": "#/definitions/RunStepDeltaCodeInterpreterImageOutputObject",
          "description": "The image data for the Code Interpreter tool call output."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDeltaCodeInterpreterOutput"
        }
      ],
      "x-ms-discriminator-value": "image"
    },
    "RunStepDeltaCodeInterpreterImageOutputObject": {
      "type": "object",
      "description": "Represents the data for a streaming run step's Code Interpreter tool call image output.",
      "properties": {
        "file_id": {
          "type": "string",
          "description": "The file ID for the image.",
          "x-ms-client-name": "fileId"
        }
      }
    },
    "RunStepDeltaCodeInterpreterLogOutput": {
      "type": "object",
      "description": "Represents a log output as produced by the Code Interpreter tool and as represented in a streaming run step's delta tool calls collection.",
      "properties": {
        "logs": {
          "type": "string",
          "description": "The text output from the Code Interpreter tool call."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDeltaCodeInterpreterOutput"
        }
      ],
      "x-ms-discriminator-value": "logs"
    },
    "RunStepDeltaCodeInterpreterOutput": {
      "type": "object",
      "description": "The abstract base representation of a streaming run step tool call's Code Interpreter tool output.",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the output in the streaming run step tool call's Code Interpreter outputs array."
        },
        "type": {
          "type": "string",
          "description": "The type of the streaming run step tool call's Code Interpreter output."
        }
      },
      "discriminator": "type",
      "required": [
        "index",
        "type"
      ]
    },
    "RunStepDeltaCodeInterpreterToolCall": {
      "type": "object",
      "description": "Represents a Code Interpreter tool call within a streaming run step's tool call details.",
      "properties": {
        "code_interpreter": {
          "$ref": "#/definitions/RunStepDeltaCodeInterpreterDetailItemObject",
          "description": "The Code Interpreter data for the tool call.",
          "x-ms-client-name": "codeInterpreter"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDeltaToolCall"
        }
      ],
      "x-ms-discriminator-value": "code_interpreter"
    },
    "RunStepDeltaDetail": {
      "type": "object",
      "description": "Represents a single run step detail item in a streaming run step's delta payload.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type for the run step detail object."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "RunStepDeltaFileSearchToolCall": {
      "type": "object",
      "description": "Represents a file search tool call within a streaming run step's tool call details.",
      "properties": {
        "file_search": {
          "type": "object",
          "description": "Reserved for future use.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-client-name": "fileSearch"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDeltaToolCall"
        }
      ],
      "x-ms-discriminator-value": "file_search"
    },
    "RunStepDeltaFunction": {
      "type": "object",
      "description": "Represents the function data in a streaming run step delta's function tool call.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function."
        },
        "arguments": {
          "type": "string",
          "description": "The arguments passed to the function as input."
        },
        "output": {
          "type": "string",
          "description": "The output of the function, null if outputs have not yet been submitted.",
          "x-nullable": true
        }
      }
    },
    "RunStepDeltaFunctionToolCall": {
      "type": "object",
      "description": "Represents a function tool call within a streaming run step's tool call details.",
      "properties": {
        "function": {
          "$ref": "#/definitions/RunStepDeltaFunction",
          "description": "The function data for the tool call."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDeltaToolCall"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "RunStepDeltaMessageCreation": {
      "type": "object",
      "description": "Represents a message creation within a streaming run step delta.",
      "properties": {
        "message_creation": {
          "$ref": "#/definitions/RunStepDeltaMessageCreationObject",
          "description": "The message creation data.",
          "x-ms-client-name": "messageCreation"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDeltaDetail"
        }
      ],
      "x-ms-discriminator-value": "message_creation"
    },
    "RunStepDeltaMessageCreationObject": {
      "type": "object",
      "description": "Represents the data within a streaming run step message creation response object.",
      "properties": {
        "message_id": {
          "type": "string",
          "description": "The ID of the newly-created message.",
          "x-ms-client-name": "messageId"
        }
      }
    },
    "RunStepDeltaToolCall": {
      "type": "object",
      "description": "The abstract base representation of a single tool call within a streaming run step's delta tool call details.",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the tool call detail in the run step's tool_calls array."
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call, used when submitting outputs to the run."
        },
        "type": {
          "type": "string",
          "description": "The type of the tool call detail item in a streaming run step's details."
        }
      },
      "discriminator": "type",
      "required": [
        "index",
        "id",
        "type"
      ]
    },
    "RunStepDeltaToolCallObject": {
      "type": "object",
      "description": "Represents an invocation of tool calls as part of a streaming run step.",
      "properties": {
        "tool_calls": {
          "type": "array",
          "description": "The collection of tool calls for the tool call detail item.",
          "items": {
            "$ref": "#/definitions/RunStepDeltaToolCall"
          },
          "x-ms-client-name": "toolCalls"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDeltaDetail"
        }
      ],
      "x-ms-discriminator-value": "tool_calls"
    },
    "RunStepDetails": {
      "type": "object",
      "description": "An abstract representation of the details for a run step.",
      "properties": {
        "type": {
          "$ref": "#/definitions/RunStepType",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "RunStepError": {
      "type": "object",
      "description": "The error information associated with a failed run step.",
      "properties": {
        "code": {
          "$ref": "#/definitions/RunStepErrorCode",
          "description": "The error code for this error."
        },
        "message": {
          "type": "string",
          "description": "The human-readable text associated with this error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "RunStepErrorCode": {
      "type": "string",
      "description": "Possible error code values attributable to a failed run step.",
      "enum": [
        "server_error",
        "rate_limit_exceeded"
      ],
      "x-ms-enum": {
        "name": "RunStepErrorCode",
        "modelAsString": true,
        "values": [
          {
            "name": "serverError",
            "value": "server_error",
            "description": "Represents a server error."
          },
          {
            "name": "rateLimitExceeded",
            "value": "rate_limit_exceeded",
            "description": "Represents an error indicating configured rate limits were exceeded."
          }
        ]
      }
    },
    "RunStepFileSearchToolCall": {
      "type": "object",
      "description": "A record of a call to a file search tool, issued by the model in evaluation of a defined tool, that represents executed file search.",
      "properties": {
        "file_search": {
          "type": "object",
          "description": "Reserved for future use.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-client-name": "fileSearch"
        }
      },
      "required": [
        "file_search"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepToolCall"
        }
      ],
      "x-ms-discriminator-value": "file_search"
    },
    "RunStepFunctionToolCall": {
      "type": "object",
      "description": "A record of a call to a function tool, issued by the model in evaluation of a defined tool, that represents the inputs and output consumed and emitted by the specified function.",
      "properties": {
        "function": {
          "$ref": "#/definitions/RunStepFunctionToolCallDetails",
          "description": "The detailed information about the function called by the model."
        }
      },
      "required": [
        "function"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepToolCall"
        }
      ],
      "x-ms-discriminator-value": "function"
    },
    "RunStepFunctionToolCallDetails": {
      "type": "object",
      "description": "The detailed information about the function called by the model.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the function."
        },
        "arguments": {
          "type": "string",
          "description": "The arguments that the model requires are provided to the named function."
        },
        "output": {
          "type": "string",
          "description": "The output of the function, only populated for function calls that have already have had their outputs submitted.",
          "x-nullable": true
        }
      },
      "required": [
        "name",
        "arguments",
        "output"
      ]
    },
    "RunStepMessageCreationDetails": {
      "type": "object",
      "description": "The detailed information associated with a message creation run step.",
      "properties": {
        "message_creation": {
          "$ref": "#/definitions/RunStepMessageCreationReference",
          "description": "Information about the message creation associated with this run step.",
          "x-ms-client-name": "messageCreation"
        }
      },
      "required": [
        "message_creation"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDetails"
        }
      ],
      "x-ms-discriminator-value": "message_creation"
    },
    "RunStepMessageCreationReference": {
      "type": "object",
      "description": "The details of a message created as a part of a run step.",
      "properties": {
        "message_id": {
          "type": "string",
          "description": "The ID of the message created by this run step.",
          "x-ms-client-name": "messageId"
        }
      },
      "required": [
        "message_id"
      ]
    },
    "RunStepStatus": {
      "type": "string",
      "description": "Possible values for the status of a run step.",
      "enum": [
        "in_progress",
        "cancelled",
        "failed",
        "completed",
        "expired"
      ],
      "x-ms-enum": {
        "name": "RunStepStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "Represents a run step still in progress."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "Represents a run step that was cancelled."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "Represents a run step that failed."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "Represents a run step that successfully completed."
          },
          {
            "name": "expired",
            "value": "expired",
            "description": "Represents a run step that expired before otherwise finishing."
          }
        ]
      }
    },
    "RunStepStreamEvent": {
      "type": "string",
      "description": "Run step operation related streaming events",
      "enum": [
        "thread.run.step.created",
        "thread.run.step.in_progress",
        "thread.run.step.delta",
        "thread.run.step.completed",
        "thread.run.step.failed",
        "thread.run.step.cancelled",
        "thread.run.step.expired"
      ],
      "x-ms-enum": {
        "name": "RunStepStreamEvent",
        "modelAsString": true,
        "values": [
          {
            "name": "ThreadRunStepCreated",
            "value": "thread.run.step.created",
            "description": "Event sent when a new thread run step is created. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepInProgress",
            "value": "thread.run.step.in_progress",
            "description": "Event sent when a run step moves to `in_progress` status. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepDelta",
            "value": "thread.run.step.delta",
            "description": "Event sent when a run step is being streamed. The data of this event is of type RunStepDeltaChunk"
          },
          {
            "name": "ThreadRunStepCompleted",
            "value": "thread.run.step.completed",
            "description": "Event sent when a run step is completed. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepFailed",
            "value": "thread.run.step.failed",
            "description": "Event sent when a run step fails. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepCancelled",
            "value": "thread.run.step.cancelled",
            "description": "Event sent when a run step is cancelled. The data of this event is of type RunStep"
          },
          {
            "name": "ThreadRunStepExpired",
            "value": "thread.run.step.expired",
            "description": "Event sent when a run step is expired. The data of this event is of type RunStep"
          }
        ]
      }
    },
    "RunStepToolCall": {
      "type": "object",
      "description": "An abstract representation of a detailed tool call as recorded within a run step for an existing run.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        },
        "id": {
          "type": "string",
          "description": "The ID of the tool call. This ID must be referenced when you submit tool outputs."
        }
      },
      "discriminator": "type",
      "required": [
        "type",
        "id"
      ]
    },
    "RunStepToolCallDetails": {
      "type": "object",
      "description": "The detailed information associated with a run step calling tools.",
      "properties": {
        "tool_calls": {
          "type": "array",
          "description": "A list of tool call details for this run step.",
          "items": {
            "$ref": "#/definitions/RunStepToolCall"
          },
          "x-ms-client-name": "toolCalls"
        }
      },
      "required": [
        "tool_calls"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RunStepDetails"
        }
      ],
      "x-ms-discriminator-value": "tool_calls"
    },
    "RunStepType": {
      "type": "string",
      "description": "The possible types of run steps.",
      "enum": [
        "message_creation",
        "tool_calls"
      ],
      "x-ms-enum": {
        "name": "RunStepType",
        "modelAsString": true,
        "values": [
          {
            "name": "messageCreation",
            "value": "message_creation",
            "description": "Represents a run step to create a message."
          },
          {
            "name": "toolCalls",
            "value": "tool_calls",
            "description": "Represents a run step that calls tools."
          }
        ]
      }
    },
    "RunStreamEvent": {
      "type": "string",
      "description": "Run operation related streaming events",
      "enum": [
        "thread.run.created",
        "thread.run.queued",
        "thread.run.in_progress",
        "thread.run.requires_action",
        "thread.run.completed",
        "thread.run.failed",
        "thread.run.cancelling",
        "thread.run.cancelled",
        "thread.run.expired"
      ],
      "x-ms-enum": {
        "name": "RunStreamEvent",
        "modelAsString": true,
        "values": [
          {
            "name": "ThreadRunCreated",
            "value": "thread.run.created",
            "description": "Event sent when a new run is created. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunQueued",
            "value": "thread.run.queued",
            "description": "Event sent when a run moves to `queued` status. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunInProgress",
            "value": "thread.run.in_progress",
            "description": "Event sent when a run moves to `in_progress` status. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunRequiresAction",
            "value": "thread.run.requires_action",
            "description": "Event sent when a run moves to `requires_action` status. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunCompleted",
            "value": "thread.run.completed",
            "description": "Event sent when a run is completed. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunFailed",
            "value": "thread.run.failed",
            "description": "Event sent when a run fails. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunCancelling",
            "value": "thread.run.cancelling",
            "description": "Event sent when a run moves to `cancelling` status. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunCancelled",
            "value": "thread.run.cancelled",
            "description": "Event sent when a run is cancelled. The data of this event is of type ThreadRun"
          },
          {
            "name": "ThreadRunExpired",
            "value": "thread.run.expired",
            "description": "Event sent when a run is expired. The data of this event is of type ThreadRun"
          }
        ]
      }
    },
    "SasCredential": {
      "type": "object",
      "description": "SAS Credential definition",
      "properties": {
        "sasToken": {
          "type": "string",
          "description": "SAS Token",
          "readOnly": true
        }
      },
      "required": [
        "sasToken"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/BaseCredential"
        }
      ],
      "x-ms-discriminator-value": "SAS"
    },
    "ScaleType": {
      "type": "string",
      "description": "Scale type for online endpoints.",
      "enum": [
        "Default",
        "TargetUtilization"
      ],
      "x-ms-enum": {
        "name": "ScaleType",
        "modelAsString": true,
        "values": [
          {
            "name": "Default",
            "value": "Default",
            "description": "Default."
          },
          {
            "name": "TargetUtilization",
            "value": "TargetUtilization",
            "description": "TargetUtilization."
          }
        ]
      }
    },
    "SkuCapacity": {
      "type": "object",
      "description": "SKU capacity information",
      "properties": {
        "default": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the default capacity."
        },
        "maximum": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the maximum."
        },
        "minimum": {
          "type": "integer",
          "format": "int32",
          "description": "Gets or sets the minimum."
        },
        "scaleType": {
          "$ref": "#/definitions/SkuScaleType",
          "description": "Gets or sets the type of the scale."
        }
      }
    },
    "SkuResource": {
      "type": "object",
      "description": "Fulfills ARM Contract requirement to list all available SKUS for a resource.",
      "properties": {
        "capacity": {
          "$ref": "#/definitions/SkuCapacity",
          "description": "Gets or sets the Sku Capacity."
        },
        "resourceType": {
          "type": "string",
          "description": "The resource type name.",
          "readOnly": true
        },
        "sku": {
          "$ref": "#/definitions/SkuSetting",
          "description": "Gets or sets the Sku."
        }
      }
    },
    "SkuResourceArmPaginatedResult": {
      "type": "object",
      "description": "A paginated list of SkuResource entities.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The SkuResource items on this page",
          "items": {
            "$ref": "#/definitions/SkuResource"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "SkuScaleType": {
      "type": "string",
      "description": "Node scaling setting for the compute sku.",
      "enum": [
        "Automatic",
        "Manual",
        "None"
      ],
      "x-ms-enum": {
        "name": "SkuScaleType",
        "modelAsString": true,
        "values": [
          {
            "name": "Automatic",
            "value": "Automatic",
            "description": "Automatically scales node count."
          },
          {
            "name": "Manual",
            "value": "Manual",
            "description": "Node count scaled upon user request."
          },
          {
            "name": "None",
            "value": "None",
            "description": "Fixed set of nodes."
          }
        ]
      }
    },
    "SkuSetting": {
      "type": "object",
      "description": "SkuSetting fulfills the need for stripped down SKU info in ARM contract.",
      "properties": {
        "name": {
          "type": "string",
          "description": "[Required] The name of the SKU. Ex - P3. It is typically a letter+number code.",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_]"
        },
        "tier": {
          "$ref": "../../../../../common-types/resource-management/v3/types.json#/definitions/SkuTier",
          "description": "This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT."
        }
      },
      "required": [
        "name"
      ]
    },
    "SubmitToolOutputsAction": {
      "type": "object",
      "description": "The details for required tool calls that must be submitted for an assistant thread run to continue.",
      "properties": {
        "submit_tool_outputs": {
          "$ref": "#/definitions/SubmitToolOutputsDetails",
          "description": "The details describing tools that should be called to submit tool outputs.",
          "x-ms-client-name": "submitToolOutputs"
        }
      },
      "required": [
        "submit_tool_outputs"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RequiredAction"
        }
      ],
      "x-ms-discriminator-value": "submit_tool_outputs"
    },
    "SubmitToolOutputsDetails": {
      "type": "object",
      "description": "The details describing tools that should be called to submit tool outputs.",
      "properties": {
        "tool_calls": {
          "type": "array",
          "description": "The list of tool calls that must be resolved for the assistant thread run to continue.",
          "items": {
            "$ref": "#/definitions/RequiredToolCall"
          },
          "x-ms-client-name": "toolCalls"
        }
      },
      "required": [
        "tool_calls"
      ]
    },
    "SystemData": {
      "type": "object",
      "description": "Metadata pertaining to creation and last modification of the resource.",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the resource was created at.",
          "readOnly": true
        },
        "createdBy": {
          "type": "string",
          "description": "The identity that created the resource.",
          "readOnly": true
        },
        "createdByType": {
          "type": "string",
          "description": "The identity type that created the resource.",
          "readOnly": true
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of resource last modification (UTC)",
          "readOnly": true
        }
      }
    },
    "ThreadDeletionStatus": {
      "type": "object",
      "description": "The status of a thread deletion operation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread.deleted'.",
          "enum": [
            "thread.deleted"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "ThreadMessage": {
      "type": "object",
      "description": "A single, existing message within an assistant thread.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread.message'.",
          "enum": [
            "thread.message"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "thread_id": {
          "type": "string",
          "description": "The ID of the thread that this message belongs to.",
          "x-ms-client-name": "threadId"
        },
        "status": {
          "$ref": "#/definitions/MessageStatus",
          "description": "The status of the message."
        },
        "incomplete_details": {
          "type": "object",
          "description": "On an incomplete message, details about why the message is incomplete.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/MessageIncompleteDetails"
            }
          ],
          "x-ms-client-name": "incompleteDetails"
        },
        "completed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the message was completed.",
          "x-nullable": true,
          "x-ms-client-name": "completedAt"
        },
        "incomplete_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the message was marked as incomplete.",
          "x-nullable": true,
          "x-ms-client-name": "incompleteAt"
        },
        "role": {
          "$ref": "#/definitions/MessageRole",
          "description": "The role associated with the assistant thread message."
        },
        "content": {
          "type": "array",
          "description": "The list of content items associated with the assistant thread message.",
          "items": {
            "$ref": "#/definitions/MessageContent"
          },
          "x-ms-identifiers": []
        },
        "assistant_id": {
          "type": "string",
          "description": "If applicable, the ID of the assistant that authored this message.",
          "x-nullable": true,
          "x-ms-client-name": "assistantId"
        },
        "run_id": {
          "type": "string",
          "description": "If applicable, the ID of the run associated with the authoring of this message.",
          "x-nullable": true,
          "x-ms-client-name": "runId"
        },
        "attachments": {
          "type": "array",
          "description": "A list of files attached to the message, and the tools they were added to.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/MessageAttachment"
          },
          "x-ms-identifiers": []
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "thread_id",
        "status",
        "incomplete_details",
        "completed_at",
        "incomplete_at",
        "role",
        "content",
        "assistant_id",
        "run_id",
        "attachments",
        "metadata"
      ]
    },
    "ThreadMessageOptions": {
      "type": "object",
      "description": "A single message within an assistant thread, as provided during that thread's creation for its initial state.",
      "properties": {
        "role": {
          "$ref": "#/definitions/MessageRole",
          "description": "The role of the entity that is creating the message. Allowed values include:\n  - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n  - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into\n    the conversation."
        },
        "content": {
          "type": "string",
          "description": "The textual content of the initial message. Currently, robust input including images and annotated text may only be provided via\na separate call to the create message API."
        },
        "attachments": {
          "type": "array",
          "description": "A list of files attached to the message, and the tools they should be added to.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/MessageAttachment"
          },
          "x-ms-identifiers": []
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "role",
        "content"
      ]
    },
    "ThreadRun": {
      "type": "object",
      "description": "Data representing a single evaluation run of an assistant thread.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'thread.run'.",
          "enum": [
            "thread.run"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "thread_id": {
          "type": "string",
          "description": "The ID of the thread associated with this run.",
          "x-ms-client-name": "threadId"
        },
        "assistant_id": {
          "type": "string",
          "description": "The ID of the assistant associated with the thread this run was performed against.",
          "x-ms-client-name": "assistantId"
        },
        "status": {
          "$ref": "#/definitions/RunStatus",
          "description": "The status of the assistant thread run."
        },
        "required_action": {
          "type": "object",
          "description": "The details of the action required for the assistant thread run to continue.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RequiredAction"
            }
          ],
          "x-ms-client-name": "requiredAction"
        },
        "last_error": {
          "type": "object",
          "description": "The last error, if any, encountered by this assistant thread run.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RunError"
            }
          ],
          "x-ms-client-name": "lastError"
        },
        "model": {
          "type": "string",
          "description": "The ID of the model to use."
        },
        "instructions": {
          "type": "string",
          "description": "The overridden system instructions used for this assistant thread run."
        },
        "tools": {
          "type": "array",
          "description": "The overridden enabled tools used for this assistant thread run.",
          "default": [],
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this object was created.",
          "x-ms-client-name": "createdAt"
        },
        "expires_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this item expires.",
          "x-nullable": true,
          "x-ms-client-name": "expiresAt"
        },
        "started_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this item was started.",
          "x-nullable": true,
          "x-ms-client-name": "startedAt"
        },
        "completed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this completed.",
          "x-nullable": true,
          "x-ms-client-name": "completedAt"
        },
        "cancelled_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this was cancelled.",
          "x-nullable": true,
          "x-ms-client-name": "cancelledAt"
        },
        "failed_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp, in seconds, representing when this failed.",
          "x-nullable": true,
          "x-ms-client-name": "failedAt"
        },
        "incomplete_details": {
          "$ref": "#/definitions/IncompleteRunDetails",
          "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
          "x-nullable": true,
          "x-ms-client-name": "incompleteDetails"
        },
        "usage": {
          "type": "object",
          "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/RunCompletionUsage"
            }
          ]
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "The sampling temperature used for this run. If not set, defaults to 1.",
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "max_prompt_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of prompt tokens specified to have been used over the course of the run.",
          "x-nullable": true,
          "x-ms-client-name": "maxPromptTokens"
        },
        "max_completion_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of completion tokens specified to have been used over the course of the run.",
          "x-nullable": true,
          "x-ms-client-name": "maxCompletionTokens"
        },
        "truncation_strategy": {
          "type": "object",
          "description": "The strategy to use for dropping messages as the context windows moves forward.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/TruncationObject"
            }
          ],
          "x-ms-client-name": "truncationStrategy"
        },
        "tool_choice": {
          "$ref": "#/definitions/AssistantsApiToolChoiceOption",
          "description": "Controls whether or not and which tool is called by the model.",
          "x-nullable": true,
          "x-ms-client-name": "toolChoice"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "The response format of the tool calls used in this run.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "thread_id",
        "assistant_id",
        "status",
        "last_error",
        "model",
        "instructions",
        "tools",
        "created_at",
        "expires_at",
        "started_at",
        "completed_at",
        "cancelled_at",
        "failed_at",
        "incomplete_details",
        "usage",
        "max_prompt_tokens",
        "max_completion_tokens",
        "truncation_strategy",
        "tool_choice",
        "response_format",
        "metadata"
      ]
    },
    "ThreadStreamEvent": {
      "type": "string",
      "description": "Thread operation related streaming events",
      "enum": [
        "thread.created"
      ],
      "x-ms-enum": {
        "name": "ThreadStreamEvent",
        "modelAsString": true,
        "values": [
          {
            "name": "ThreadCreated",
            "value": "thread.created",
            "description": "Event sent when a new thread is created. The data of this event is of type AssistantThread"
          }
        ]
      }
    },
    "ToolDefinition": {
      "type": "object",
      "description": "An abstract representation of an input tool definition that an assistant can use.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "ToolOutput": {
      "type": "object",
      "description": "The data provided during a tool outputs submission to resolve pending tool calls and allow the model to continue.",
      "properties": {
        "tool_call_id": {
          "type": "string",
          "description": "The ID of the tool call being resolved, as provided in the tool calls of a required action from a run.",
          "x-ms-client-name": "toolCallId"
        },
        "output": {
          "type": "string",
          "description": "The output from the tool to be submitted."
        }
      }
    },
    "ToolResources": {
      "type": "object",
      "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "properties": {
        "code_interpreter": {
          "$ref": "#/definitions/CodeInterpreterToolResource",
          "description": "Resources to be used by the `code_interpreter tool` consisting of file IDs.",
          "x-ms-client-name": "codeInterpreter"
        },
        "file_search": {
          "$ref": "#/definitions/FileSearchToolResource",
          "description": "Resources to be used by the `file_search` tool consisting of vector store IDs.",
          "x-ms-client-name": "fileSearch"
        }
      }
    },
    "TruncationObject": {
      "type": "object",
      "description": "Controls for how a thread will be truncated prior to the run. Use this to control the initial\ncontext window of the run.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will\nbe truncated to the `lastMessages` count most recent messages in the thread. When set to `auto`, messages in the middle of the thread\nwill be dropped to fit the context length of the model, `max_prompt_tokens`.",
          "default": "auto",
          "enum": [
            "auto",
            "last_messages"
          ],
          "x-ms-enum": {
            "name": "TruncationStrategy",
            "modelAsString": true,
            "values": [
              {
                "name": "auto",
                "value": "auto",
                "description": "Default value. Messages in the middle of the thread will be dropped to fit the context length of the model."
              },
              {
                "name": "lastMessages",
                "value": "last_messages",
                "description": "The thread will truncate to the `lastMessages` count of recent messages."
              }
            ]
          }
        },
        "last_messages": {
          "type": "integer",
          "format": "int32",
          "description": "The number of most recent messages from the thread when constructing the context for the run.",
          "x-nullable": true,
          "x-ms-client-name": "lastMessages"
        }
      },
      "required": [
        "type"
      ]
    },
    "TruncationStrategy": {
      "type": "string",
      "description": "Possible truncation strategies for the thread.",
      "enum": [
        "auto",
        "last_messages"
      ],
      "x-ms-enum": {
        "name": "TruncationStrategy",
        "modelAsString": true,
        "values": [
          {
            "name": "auto",
            "value": "auto",
            "description": "Default value. Messages in the middle of the thread will be dropped to fit the context length of the model."
          },
          {
            "name": "lastMessages",
            "value": "last_messages",
            "description": "The thread will truncate to the `lastMessages` count of recent messages."
          }
        ]
      }
    },
    "UpdateAssistantOptions": {
      "type": "object",
      "description": "The request details to use when modifying an existing assistant.",
      "properties": {
        "model": {
          "type": "string",
          "description": "The ID of the model to use."
        },
        "name": {
          "type": "string",
          "description": "The modified name for the assistant to use.",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "description": "The modified description for the assistant to use.",
          "x-nullable": true
        },
        "instructions": {
          "type": "string",
          "description": "The modified system instructions for the new assistant to use.",
          "x-nullable": true
        },
        "tools": {
          "type": "array",
          "description": "The modified collection of tools to enable for the assistant.",
          "default": [],
          "items": {
            "$ref": "#/definitions/ToolDefinition"
          },
          "x-ms-identifiers": []
        },
        "tool_resources": {
          "$ref": "#/definitions/UpdateToolResourcesOptions",
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "x-ms-client-name": "toolResources"
        },
        "temperature": {
          "type": "number",
          "format": "float",
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
          "default": 1,
          "x-nullable": true
        },
        "top_p": {
          "type": "number",
          "format": "float",
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
          "default": 1,
          "x-nullable": true,
          "x-ms-client-name": "topP"
        },
        "response_format": {
          "$ref": "#/definitions/AssistantsApiResponseFormatOption",
          "description": "The response format of the tool calls used by this assistant.",
          "x-nullable": true,
          "x-ms-client-name": "responseFormat"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UpdateAssistantThreadOptions": {
      "type": "object",
      "description": "The details used to update an existing assistant thread",
      "properties": {
        "tool_resources": {
          "type": "object",
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/UpdateToolResourcesOptions"
            }
          ],
          "x-ms-client-name": "toolResources"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UpdateCodeInterpreterToolResourceOptions": {
      "type": "object",
      "description": "Request object to update `code_interpreted` tool resources.",
      "properties": {
        "file_ids": {
          "type": "array",
          "description": "A list of file IDs to override the current list of the assistant.",
          "maxItems": 20,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "fileIds"
        }
      }
    },
    "UpdateEvaluationRequest": {
      "type": "object",
      "description": "Update Evaluation Request",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Tags to be updated.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string",
          "description": "Display Name"
        },
        "description": {
          "type": "string",
          "description": "Description"
        }
      }
    },
    "UpdateFileSearchToolResourceOptions": {
      "type": "object",
      "description": "Request object to update `file_search` tool resources.",
      "properties": {
        "vector_store_ids": {
          "type": "array",
          "description": "A list of vector store IDs to override the current list of the assistant.",
          "maxItems": 1,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "vectorStoreIds"
        }
      }
    },
    "UpdateToolResourcesOptions": {
      "type": "object",
      "description": "Request object. A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "properties": {
        "code_interpreter": {
          "$ref": "#/definitions/UpdateCodeInterpreterToolResourceOptions",
          "description": "Overrides the list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "x-ms-client-name": "codeInterpreter"
        },
        "file_search": {
          "$ref": "#/definitions/UpdateFileSearchToolResourceOptions",
          "description": "Overrides the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
          "x-ms-client-name": "fileSearch"
        }
      }
    },
    "UriFileDataVersion": {
      "type": "object",
      "description": "UriFileDataVersion Definition",
      "allOf": [
        {
          "$ref": "#/definitions/DataVersionBase"
        }
      ],
      "x-ms-discriminator-value": "uri_file"
    },
    "UriFolderDataVersion": {
      "type": "object",
      "description": "UriFolderDataVersion Definition",
      "allOf": [
        {
          "$ref": "#/definitions/DataVersionBase"
        }
      ],
      "x-ms-discriminator-value": "uri_folder"
    },
    "VectorStore": {
      "type": "object",
      "description": "A vector store is a collection of processed files can be used by the `file_search` tool.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `vector_store`",
          "enum": [
            "vector_store"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store was created.",
          "x-ms-client-name": "createdAt"
        },
        "name": {
          "type": "string",
          "description": "The name of the vector store."
        },
        "usage_bytes": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of bytes used by the files in the vector store.",
          "x-ms-client-name": "usageBytes"
        },
        "file_counts": {
          "$ref": "#/definitions/VectorStoreFileCount",
          "description": "Files count grouped by status processed or being processed by this vector store.",
          "x-ms-client-name": "fileCounts"
        },
        "status": {
          "$ref": "#/definitions/VectorStoreStatus",
          "description": "The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use."
        },
        "expires_after": {
          "$ref": "#/definitions/VectorStoreExpirationPolicy",
          "description": "Details on when this vector store expires",
          "x-ms-client-name": "expiresAfter"
        },
        "expires_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store will expire.",
          "x-nullable": true,
          "x-ms-client-name": "expiresAt"
        },
        "last_active_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store was last active.",
          "x-nullable": true,
          "x-ms-client-name": "lastActiveAt"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "name",
        "usage_bytes",
        "file_counts",
        "status",
        "last_active_at",
        "metadata"
      ]
    },
    "VectorStoreAutoChunkingStrategyRequest": {
      "type": "object",
      "description": "The default strategy. This strategy currently uses a max_chunk_size_tokens of 800 and chunk_overlap_tokens of 400.",
      "allOf": [
        {
          "$ref": "#/definitions/VectorStoreChunkingStrategyRequest"
        }
      ],
      "x-ms-discriminator-value": "auto"
    },
    "VectorStoreAutoChunkingStrategyResponse": {
      "type": "object",
      "description": "This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the chunking_strategy concept was introduced in the API.",
      "allOf": [
        {
          "$ref": "#/definitions/VectorStoreChunkingStrategyResponse"
        }
      ],
      "x-ms-discriminator-value": "other"
    },
    "VectorStoreChunkingStrategyRequest": {
      "type": "object",
      "description": "An abstract representation of a vector store chunking strategy configuration.",
      "properties": {
        "type": {
          "$ref": "#/definitions/VectorStoreChunkingStrategyRequestType",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "VectorStoreChunkingStrategyRequestType": {
      "type": "string",
      "description": "Type of chunking strategy",
      "enum": [
        "auto",
        "static"
      ],
      "x-ms-enum": {
        "name": "VectorStoreChunkingStrategyRequestType",
        "modelAsString": true,
        "values": [
          {
            "name": "auto",
            "value": "auto"
          },
          {
            "name": "static",
            "value": "static"
          }
        ]
      }
    },
    "VectorStoreChunkingStrategyResponse": {
      "type": "object",
      "description": "An abstract representation of a vector store chunking strategy configuration.",
      "properties": {
        "type": {
          "$ref": "#/definitions/VectorStoreChunkingStrategyResponseType",
          "description": "The object type."
        }
      },
      "discriminator": "type",
      "required": [
        "type"
      ]
    },
    "VectorStoreChunkingStrategyResponseType": {
      "type": "string",
      "description": "Type of chunking strategy",
      "enum": [
        "other",
        "static"
      ],
      "x-ms-enum": {
        "name": "VectorStoreChunkingStrategyResponseType",
        "modelAsString": true,
        "values": [
          {
            "name": "other",
            "value": "other"
          },
          {
            "name": "static",
            "value": "static"
          }
        ]
      }
    },
    "VectorStoreDeletionStatus": {
      "type": "object",
      "description": "Response object for deleting a vector store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'vector_store.deleted'.",
          "enum": [
            "vector_store.deleted"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "VectorStoreExpirationPolicy": {
      "type": "object",
      "description": "The expiration policy for a vector store.",
      "properties": {
        "anchor": {
          "$ref": "#/definitions/VectorStoreExpirationPolicyAnchor",
          "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`."
        },
        "days": {
          "type": "integer",
          "format": "int32",
          "description": "The anchor timestamp after which the expiration policy applies.",
          "minimum": 1,
          "maximum": 365
        }
      },
      "required": [
        "anchor",
        "days"
      ]
    },
    "VectorStoreExpirationPolicyAnchor": {
      "type": "string",
      "description": "Describes the relationship between the days and the expiration of this vector store",
      "enum": [
        "last_active_at"
      ],
      "x-ms-enum": {
        "name": "VectorStoreExpirationPolicyAnchor",
        "modelAsString": true,
        "values": [
          {
            "name": "lastActiveAt",
            "value": "last_active_at",
            "description": "The expiration policy is based on the last time the vector store was active."
          }
        ]
      }
    },
    "VectorStoreFile": {
      "type": "object",
      "description": "Description of a file attached to a vector store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `vector_store.file`.",
          "enum": [
            "vector_store.file"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "usage_bytes": {
          "type": "integer",
          "format": "int32",
          "description": "The total vector store usage in bytes. Note that this may be different from the original file size.",
          "x-ms-client-name": "usageBytes"
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store file was created.",
          "x-ms-client-name": "createdAt"
        },
        "vector_store_id": {
          "type": "string",
          "description": "The ID of the vector store that the file is attached to.",
          "x-ms-client-name": "vectorStoreId"
        },
        "status": {
          "$ref": "#/definitions/VectorStoreFileStatus",
          "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use."
        },
        "last_error": {
          "type": "object",
          "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/VectorStoreFileError"
            }
          ],
          "x-ms-client-name": "lastError"
        },
        "chunking_strategy": {
          "$ref": "#/definitions/VectorStoreChunkingStrategyResponse",
          "description": "The strategy used to chunk the file.",
          "x-ms-client-name": "chunkingStrategy"
        }
      },
      "required": [
        "id",
        "object",
        "usage_bytes",
        "created_at",
        "vector_store_id",
        "status",
        "last_error",
        "chunking_strategy"
      ]
    },
    "VectorStoreFileBatch": {
      "type": "object",
      "description": "A batch of files attached to a vector store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier, which can be referenced in API endpoints."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always `vector_store.file_batch`.",
          "enum": [
            "vector_store.files_batch"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        },
        "created_at": {
          "type": "integer",
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) for when the vector store files batch was created.",
          "x-ms-client-name": "createdAt"
        },
        "vector_store_id": {
          "type": "string",
          "description": "The ID of the vector store that the file is attached to.",
          "x-ms-client-name": "vectorStoreId"
        },
        "status": {
          "$ref": "#/definitions/VectorStoreFileBatchStatus",
          "description": "The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`."
        },
        "file_counts": {
          "$ref": "#/definitions/VectorStoreFileCount",
          "description": "Files count grouped by status processed or being processed by this vector store.",
          "x-ms-client-name": "fileCounts"
        }
      },
      "required": [
        "id",
        "object",
        "created_at",
        "vector_store_id",
        "status",
        "file_counts"
      ]
    },
    "VectorStoreFileBatchStatus": {
      "type": "string",
      "description": "The status of the vector store file batch.",
      "enum": [
        "in_progress",
        "completed",
        "cancelled",
        "failed"
      ],
      "x-ms-enum": {
        "name": "VectorStoreFileBatchStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "The vector store is still processing this file batch."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "The vector store file batch is ready for use."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "The vector store file batch was cancelled."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "The vector store file batch failed to process."
          }
        ]
      }
    },
    "VectorStoreFileCount": {
      "type": "object",
      "description": "Counts of files processed or being processed by this vector store grouped by status.",
      "properties": {
        "in_progress": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files that are currently being processed.",
          "x-ms-client-name": "inProgress"
        },
        "completed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files that have been successfully processed."
        },
        "failed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files that have failed to process."
        },
        "cancelled": {
          "type": "integer",
          "format": "int32",
          "description": "The number of files that were cancelled."
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of files."
        }
      },
      "required": [
        "in_progress",
        "completed",
        "failed",
        "cancelled",
        "total"
      ]
    },
    "VectorStoreFileDeletionStatus": {
      "type": "object",
      "description": "Response object for deleting a vector store file relationship.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the resource specified for deletion."
        },
        "deleted": {
          "type": "boolean",
          "description": "A value indicating whether deletion was successful."
        },
        "object": {
          "type": "string",
          "description": "The object type, which is always 'vector_store.deleted'.",
          "enum": [
            "vector_store.file.deleted"
          ],
          "x-ms-enum": {
            "modelAsString": false
          }
        }
      },
      "required": [
        "id",
        "deleted",
        "object"
      ]
    },
    "VectorStoreFileError": {
      "type": "object",
      "description": "Details on the error that may have ocurred while processing a file for this vector store",
      "properties": {
        "code": {
          "$ref": "#/definitions/VectorStoreFileErrorCode",
          "description": "One of `server_error` or `rate_limit_exceeded`."
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "VectorStoreFileErrorCode": {
      "type": "string",
      "description": "Error code variants for vector store file processing",
      "enum": [
        "internal_error",
        "file_not_found",
        "parsing_error",
        "unhandled_mime_type"
      ],
      "x-ms-enum": {
        "name": "VectorStoreFileErrorCode",
        "modelAsString": true,
        "values": [
          {
            "name": "internalError",
            "value": "internal_error",
            "description": "An internal error occurred."
          },
          {
            "name": "fileNotFound",
            "value": "file_not_found",
            "description": "The file was not found."
          },
          {
            "name": "parsingError",
            "value": "parsing_error",
            "description": "The file could not be parsed."
          },
          {
            "name": "unhandledMimeType",
            "value": "unhandled_mime_type",
            "description": "The file has an unhandled mime type."
          }
        ]
      }
    },
    "VectorStoreFileStatus": {
      "type": "string",
      "description": "Vector store file status",
      "enum": [
        "in_progress",
        "completed",
        "failed",
        "cancelled"
      ],
      "x-ms-enum": {
        "name": "VectorStoreFileStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "The file is currently being processed."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "The file has been successfully processed."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "The file has failed to process."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "The file was cancelled."
          }
        ]
      }
    },
    "VectorStoreFileStatusFilter": {
      "type": "string",
      "description": "Query parameter filter for vector store file retrieval endpoint",
      "enum": [
        "in_progress",
        "completed",
        "failed",
        "cancelled"
      ],
      "x-ms-enum": {
        "name": "VectorStoreFileStatusFilter",
        "modelAsString": true,
        "values": [
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "Retrieve only files that are currently being processed"
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "Retrieve only files that have been successfully processed"
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "Retrieve only files that have failed to process"
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "Retrieve only files that were cancelled"
          }
        ]
      }
    },
    "VectorStoreOptions": {
      "type": "object",
      "description": "Request object for creating a vector store.",
      "properties": {
        "file_ids": {
          "type": "array",
          "description": "A list of file IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
          "maxItems": 500,
          "items": {
            "type": "string"
          },
          "x-ms-client-name": "fileIds"
        },
        "name": {
          "type": "string",
          "description": "The name of the vector store."
        },
        "expires_after": {
          "$ref": "#/definitions/VectorStoreExpirationPolicy",
          "description": "Details on when this vector store expires",
          "x-ms-client-name": "expiresAfter"
        },
        "chunking_strategy": {
          "$ref": "#/definitions/VectorStoreChunkingStrategyRequest",
          "description": "The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. Only applicable if file_ids is non-empty.",
          "x-ms-client-name": "chunkingStrategy"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VectorStoreStaticChunkingStrategyOptions": {
      "type": "object",
      "description": "Options to configure a vector store static chunking strategy.",
      "properties": {
        "max_chunk_size_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of tokens in each chunk. The default value is 800. The minimum value is 100 and the maximum value is 4096.",
          "minimum": 100,
          "maximum": 4096,
          "x-ms-client-name": "maxChunkSizeTokens"
        },
        "chunk_overlap_tokens": {
          "type": "integer",
          "format": "int32",
          "description": "The number of tokens that overlap between chunks. The default value is 400. Note that the overlap must not exceed half of max_chunk_size_tokens.",
          "x-ms-client-name": "chunkOverlapTokens"
        }
      },
      "required": [
        "max_chunk_size_tokens",
        "chunk_overlap_tokens"
      ]
    },
    "VectorStoreStaticChunkingStrategyRequest": {
      "type": "object",
      "description": "A statically configured chunking strategy.",
      "properties": {
        "static": {
          "$ref": "#/definitions/VectorStoreStaticChunkingStrategyOptions",
          "description": "The options for the static chunking strategy."
        }
      },
      "required": [
        "static"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorStoreChunkingStrategyRequest"
        }
      ],
      "x-ms-discriminator-value": "static"
    },
    "VectorStoreStaticChunkingStrategyResponse": {
      "type": "object",
      "description": "A statically configured chunking strategy.",
      "properties": {
        "static": {
          "$ref": "#/definitions/VectorStoreStaticChunkingStrategyOptions",
          "description": "The options for the static chunking strategy."
        }
      },
      "required": [
        "static"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VectorStoreChunkingStrategyResponse"
        }
      ],
      "x-ms-discriminator-value": "static"
    },
    "VectorStoreStatus": {
      "type": "string",
      "description": "Vector store possible status",
      "enum": [
        "expired",
        "in_progress",
        "completed"
      ],
      "x-ms-enum": {
        "name": "VectorStoreStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "expired",
            "value": "expired",
            "description": "expired status indicates that this vector store has expired and is no longer available for use."
          },
          {
            "name": "inProgress",
            "value": "in_progress",
            "description": "in_progress status indicates that this vector store is still processing files."
          },
          {
            "name": "completed",
            "value": "completed",
            "description": "completed status indicates that this vector store is ready for use."
          }
        ]
      }
    },
    "VectorStoreUpdateOptions": {
      "type": "object",
      "description": "Request object for updating a vector store.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the vector store.",
          "x-nullable": true
        },
        "expires_after": {
          "type": "object",
          "description": "Details on when this vector store expires",
          "x-nullable": true,
          "allOf": [
            {
              "$ref": "#/definitions/VectorStoreExpirationPolicy"
            }
          ],
          "x-ms-client-name": "expiresAfter"
        },
        "metadata": {
          "type": "object",
          "description": "A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length.",
          "x-nullable": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VersionInfo": {
      "type": "object",
      "description": "Next version definition.",
      "properties": {
        "nextVersion": {
          "type": "integer",
          "format": "int64",
          "description": "Next version as defined by the server. The server keeps track of all versions that are string-representations of integers. If one exists, the nextVersion will be a string representation of the highest integer value + 1. Otherwise, the nextVersion will default to '1'."
        },
        "latestVersion": {
          "type": "string",
          "description": "Current latest version of the resource."
        }
      },
      "required": [
        "latestVersion"
      ]
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.MaxPageSizeQueryParameter": {
      "name": "maxpagesize",
      "in": "query",
      "description": "The maximum number of result items per page.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "description": "The number of result items to skip.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.TopQueryParameter": {
      "name": "top",
      "in": "query",
      "description": "The number of result items to return.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    }
  }
}
