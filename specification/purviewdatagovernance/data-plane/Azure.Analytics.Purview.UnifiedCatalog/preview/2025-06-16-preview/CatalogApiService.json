{
  "swagger": "2.0",
  "info": {
    "title": "PurviewUnifiedCatalog",
    "version": "2025-06-16-preview",
    "description": "Creates a data plane client for Purview Unified Catalog.",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/purviewunifiedcatalog/api",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "required": true,
        "type": "string",
        "format": "uri",
        "x-ms-skip-url-encoding": true
      }
    ]
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://purview.azure.net/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "https://purview.azure.net/.default": ""
      }
    }
  },
  "tags": [
    {
      "name": "CriticalDataElements"
    }
  ],
  "paths": {
    "/criticalDataElements": {
      "get": {
        "operationId": "ListCriticalDataElementAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Searches and retrieves critical data elements based on domain, keyword, and other filters.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Whether to return minimal information for referred Domains.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Search keyword.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.OrderByQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedCriticalDataElement"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "ListCriticalDataElementAsync_MaximumSet": {
            "$ref": "./examples/ListCriticalDataElementAsync_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "operationId": "CreateCriticalDataElementAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Creates a new critical data element in the catalog.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CriticalDataElement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/CreateCriticalDataElementResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "CreateCriticalDataElementAsync_MaximumSet": {
            "$ref": "./examples/CreateCriticalDataElementAsync_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/criticalDataElements/{criticalDataElementId}": {
      "get": {
        "operationId": "GetCriticalDataElementByIdAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Searches and retrieves critical data elements based on Id.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "criticalDataElementId",
            "in": "path",
            "description": "The unique identifier of the critical data element.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CriticalDataElement"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCriticalDataElementByIdAsync_MaximumSet": {
            "$ref": "./examples/GetCriticalDataElementByIdAsync_MaximumSet_Gen.json"
          }
        }
      },
      "put": {
        "operationId": "UpdateCriticalDataElementAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Updates an existing critical data element in the catalog.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "criticalDataElementId",
            "in": "path",
            "description": "The unique identifier of the critical data element.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CriticalDataElement"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "UpdateCriticalDataElementAsync_MaximumSet": {
            "$ref": "./examples/UpdateCriticalDataElementAsync_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "DeleteCriticalDataElementByIdAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Deletes an existing critical data element in the catalog.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "criticalDataElementId",
            "in": "path",
            "description": "The unique identifier of the critical data element.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DeleteCriticalDataElementByIdAsync_MaximumSet": {
            "$ref": "./examples/DeleteCriticalDataElementByIdAsync_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/criticalDataElements/{criticalDataElementId}/relationships": {
      "get": {
        "operationId": "ListCriticalDataElementRelationshipsAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Retrieves relationships for a critical data element.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "criticalDataElementId",
            "in": "path",
            "description": "The unique identifier of the critical data element.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "The body associated with the critical data element output.",
            "required": true,
            "type": "string",
            "enum": [
              "DOMAIN",
              "DATAPRODUCT",
              "TERM",
              "DATAASSET",
              "OBJECTIVE",
              "KEYRESULT",
              "CRITICALDATAELEMENT",
              "CRITICALDATACOLUMN",
              "CUSTOMMETADATA",
              "ATTRIBUTE",
              "ATTRIBUTEINSTANCE",
              "WORKFLOW",
              "CATALOGSNAPSHOT",
              "WORKFLOWRUN"
            ],
            "x-ms-enum": {
              "name": "EntityCategory",
              "modelAsString": true,
              "values": [
                {
                  "name": "Domain",
                  "value": "DOMAIN",
                  "description": "Domain entity category."
                },
                {
                  "name": "DataProduct",
                  "value": "DATAPRODUCT",
                  "description": "Data product entity category."
                },
                {
                  "name": "Term",
                  "value": "TERM",
                  "description": "Term entity category."
                },
                {
                  "name": "DataAsset",
                  "value": "DATAASSET",
                  "description": "Data asset entity category."
                },
                {
                  "name": "Objective",
                  "value": "OBJECTIVE",
                  "description": "Objective entity category."
                },
                {
                  "name": "KeyResult",
                  "value": "KEYRESULT",
                  "description": "Key result entity category."
                },
                {
                  "name": "CriticalDataElement",
                  "value": "CRITICALDATAELEMENT",
                  "description": "Critical data element entity category."
                },
                {
                  "name": "CriticalDataColumn",
                  "value": "CRITICALDATACOLUMN",
                  "description": "Critical data column entity category."
                },
                {
                  "name": "CustomMetadata",
                  "value": "CUSTOMMETADATA",
                  "description": "Custom metadata entity category."
                },
                {
                  "name": "Attribute",
                  "value": "ATTRIBUTE",
                  "description": "Attribute entity category."
                },
                {
                  "name": "AttributeInstance",
                  "value": "ATTRIBUTEINSTANCE",
                  "description": "Attribute instance entity category."
                },
                {
                  "name": "Workflow",
                  "value": "WORKFLOW",
                  "description": "Workflow entity category."
                },
                {
                  "name": "CatalogSnapshot",
                  "value": "CATALOGSNAPSHOT",
                  "description": "Catalog snapshot entity category."
                },
                {
                  "name": "WorkflowRun",
                  "value": "WORKFLOWRUN",
                  "description": "Workflow run entity category."
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedCdeRelationshipWrapper"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "ListCriticalDataElementRelationshipsAsync_MaximumSet": {
            "$ref": "./examples/ListCriticalDataElementRelationshipsAsync_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "post": {
        "operationId": "CreateCriticalDataElementRelationshipAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Updates relationships for a critical data element.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "criticalDataElementId",
            "in": "path",
            "description": "The unique identifier of the critical data element.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "The type of entity for the relationship.",
            "required": true,
            "type": "string",
            "enum": [
              "DOMAIN",
              "DATAPRODUCT",
              "TERM",
              "DATAASSET",
              "OBJECTIVE",
              "KEYRESULT",
              "CRITICALDATAELEMENT",
              "CRITICALDATACOLUMN",
              "CUSTOMMETADATA",
              "ATTRIBUTE",
              "ATTRIBUTEINSTANCE",
              "WORKFLOW",
              "CATALOGSNAPSHOT",
              "WORKFLOWRUN"
            ],
            "x-ms-enum": {
              "name": "EntityCategory",
              "modelAsString": true,
              "values": [
                {
                  "name": "Domain",
                  "value": "DOMAIN",
                  "description": "Domain entity category."
                },
                {
                  "name": "DataProduct",
                  "value": "DATAPRODUCT",
                  "description": "Data product entity category."
                },
                {
                  "name": "Term",
                  "value": "TERM",
                  "description": "Term entity category."
                },
                {
                  "name": "DataAsset",
                  "value": "DATAASSET",
                  "description": "Data asset entity category."
                },
                {
                  "name": "Objective",
                  "value": "OBJECTIVE",
                  "description": "Objective entity category."
                },
                {
                  "name": "KeyResult",
                  "value": "KEYRESULT",
                  "description": "Key result entity category."
                },
                {
                  "name": "CriticalDataElement",
                  "value": "CRITICALDATAELEMENT",
                  "description": "Critical data element entity category."
                },
                {
                  "name": "CriticalDataColumn",
                  "value": "CRITICALDATACOLUMN",
                  "description": "Critical data column entity category."
                },
                {
                  "name": "CustomMetadata",
                  "value": "CUSTOMMETADATA",
                  "description": "Custom metadata entity category."
                },
                {
                  "name": "Attribute",
                  "value": "ATTRIBUTE",
                  "description": "Attribute entity category."
                },
                {
                  "name": "AttributeInstance",
                  "value": "ATTRIBUTEINSTANCE",
                  "description": "Attribute instance entity category."
                },
                {
                  "name": "Workflow",
                  "value": "WORKFLOW",
                  "description": "Workflow entity category."
                },
                {
                  "name": "CatalogSnapshot",
                  "value": "CATALOGSNAPSHOT",
                  "description": "Catalog snapshot entity category."
                },
                {
                  "name": "WorkflowRun",
                  "value": "WORKFLOWRUN",
                  "description": "Workflow run entity category."
                }
              ]
            }
          },
          {
            "name": "relationship",
            "in": "body",
            "description": "The input properties for creating the relationship.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataElementProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/RelationshipWrapper"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "CreateCriticalDataElementRelationshipAsync_MaximumSet": {
            "$ref": "./examples/CreateCriticalDataElementRelationshipAsync_MaximumSet_Gen.json"
          }
        }
      },
      "delete": {
        "operationId": "DeleteCriticalDataElementRelationshipAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Deletes relationships for a critical data element.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "criticalDataElementId",
            "in": "path",
            "description": "The unique identifier of the critical data element.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "The type of entity for the relationship.",
            "required": true,
            "type": "string",
            "enum": [
              "DOMAIN",
              "DATAPRODUCT",
              "TERM",
              "DATAASSET",
              "OBJECTIVE",
              "KEYRESULT",
              "CRITICALDATAELEMENT",
              "CRITICALDATACOLUMN",
              "CUSTOMMETADATA",
              "ATTRIBUTE",
              "ATTRIBUTEINSTANCE",
              "WORKFLOW",
              "CATALOGSNAPSHOT",
              "WORKFLOWRUN"
            ],
            "x-ms-enum": {
              "name": "EntityCategory",
              "modelAsString": true,
              "values": [
                {
                  "name": "Domain",
                  "value": "DOMAIN",
                  "description": "Domain entity category."
                },
                {
                  "name": "DataProduct",
                  "value": "DATAPRODUCT",
                  "description": "Data product entity category."
                },
                {
                  "name": "Term",
                  "value": "TERM",
                  "description": "Term entity category."
                },
                {
                  "name": "DataAsset",
                  "value": "DATAASSET",
                  "description": "Data asset entity category."
                },
                {
                  "name": "Objective",
                  "value": "OBJECTIVE",
                  "description": "Objective entity category."
                },
                {
                  "name": "KeyResult",
                  "value": "KEYRESULT",
                  "description": "Key result entity category."
                },
                {
                  "name": "CriticalDataElement",
                  "value": "CRITICALDATAELEMENT",
                  "description": "Critical data element entity category."
                },
                {
                  "name": "CriticalDataColumn",
                  "value": "CRITICALDATACOLUMN",
                  "description": "Critical data column entity category."
                },
                {
                  "name": "CustomMetadata",
                  "value": "CUSTOMMETADATA",
                  "description": "Custom metadata entity category."
                },
                {
                  "name": "Attribute",
                  "value": "ATTRIBUTE",
                  "description": "Attribute entity category."
                },
                {
                  "name": "AttributeInstance",
                  "value": "ATTRIBUTEINSTANCE",
                  "description": "Attribute instance entity category."
                },
                {
                  "name": "Workflow",
                  "value": "WORKFLOW",
                  "description": "Workflow entity category."
                },
                {
                  "name": "CatalogSnapshot",
                  "value": "CATALOGSNAPSHOT",
                  "description": "Catalog snapshot entity category."
                },
                {
                  "name": "WorkflowRun",
                  "value": "WORKFLOWRUN",
                  "description": "Workflow run entity category."
                }
              ]
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "The unique identifier of the related entity.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "DeleteCriticalDataElementRelationshipAsync_MaximumSet": {
            "$ref": "./examples/DeleteCriticalDataElementRelationshipAsync_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/criticalDataElements/facets": {
      "post": {
        "operationId": "GetCriticalDataElementFacetsAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Retrieves facets for critical data elements.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CriticalDataElementFacetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/FacetsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "GetCriticalDataElementFacetsAsync_MaximumSet": {
            "$ref": "./examples/GetCriticalDataElementFacetsAsync_MaximumSet_Gen.json"
          }
        }
      }
    },
    "/criticalDataElements/query": {
      "post": {
        "operationId": "QueryCriticalDataElementsAsync",
        "tags": [
          "CriticalDataElements"
        ],
        "description": "Queries critical data elements based on various criteria.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "duplicatecheck",
            "in": "query",
            "description": "The number of duplicate checks to perform.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The request body containing query criteria.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CriticalDataElementQueryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CriticalDataElementsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-examples": {
          "QueryCriticalDataElementsAsync_MaximumSet": {
            "$ref": "./examples/QueryCriticalDataElementsAsync_MaximumSet_Gen.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          }
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Azure REST API guidelines - https://aka.ms/AzureRestApiGuidelines#handling-errors.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "Azure.Core.uuid": {
      "type": "string",
      "format": "uuid",
      "description": "Universally Unique Identifier"
    },
    "CatalogApiServiceOrderBy": {
      "type": "object",
      "description": "Ordering configuration for API service results.",
      "properties": {
        "field": {
          "type": "string",
          "description": "The field name to order by."
        },
        "direction": {
          "type": "string",
          "description": "The sort direction (ascending or descending)."
        }
      }
    },
    "CatalogModelContactsValueInner": {
      "type": "object",
      "description": "Contact information for catalog entities.",
      "properties": {
        "id": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "The unique identifier of the contact."
        },
        "description": {
          "type": "string",
          "description": "A description or note about the contact."
        }
      }
    },
    "CatalogModelCriticalDataElementDataTypeEnum": {
      "type": "string",
      "description": "Data types supported for critical data elements.",
      "enum": [
        "TEXT",
        "NUMBER",
        "DATETIME",
        "BOOLEAN"
      ],
      "x-ms-enum": {
        "name": "CatalogModelCriticalDataElementDataTypeEnum",
        "modelAsString": true,
        "values": [
          {
            "name": "Text",
            "value": "TEXT",
            "description": "Text data type."
          },
          {
            "name": "Number",
            "value": "NUMBER",
            "description": "Numeric data type."
          },
          {
            "name": "DateTime",
            "value": "DATETIME",
            "description": "Date and time data type."
          },
          {
            "name": "Boolean",
            "value": "BOOLEAN",
            "description": "Boolean data type."
          }
        ]
      }
    },
    "CatalogModelManagedAttribute": {
      "type": "object",
      "description": "Managed attribute configuration for catalog entities.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the managed attribute."
        },
        "value": {
          "type": "string",
          "description": "The value of the attribute."
        },
        "isRequired": {
          "type": "boolean",
          "description": "Whether this attribute is required."
        }
      }
    },
    "CatalogModelStatus": {
      "type": "string",
      "description": "Status of a catalog model entity indicating its lifecycle state.",
      "enum": [
        "DRAFT",
        "PUBLISHED",
        "EXPIRED"
      ],
      "x-ms-enum": {
        "name": "CatalogModelStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "Draft",
            "value": "DRAFT",
            "description": "The entity is in draft state."
          },
          {
            "name": "Published",
            "value": "PUBLISHED",
            "description": "The entity is published and active."
          },
          {
            "name": "Expired",
            "value": "EXPIRED",
            "description": "The entity has expired and is no longer active."
          }
        ]
      }
    },
    "CatalogModelSystemDataWithExpired": {
      "type": "object",
      "description": "System metadata with expiration information for catalog entities.",
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the record was created."
        },
        "createdBy": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "The unique identifier of the user who created the record."
        },
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the record was last modified."
        },
        "lastModifiedBy": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "The unique identifier of the user who last modified the record."
        },
        "expiredAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the record expires."
        },
        "expiredBy": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "The unique identifier of the user who expired the record."
        }
      }
    },
    "CdeRelationshipWrapper": {
      "type": "object",
      "description": "Wrapper for relationship information between entities.",
      "properties": {
        "relationshipType": {
          "type": "string",
          "description": "Type of the relationship."
        },
        "entityId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Unique identifier of the related entity.",
          "readOnly": true
        }
      },
      "required": [
        "entityId"
      ]
    },
    "CreateCriticalDataElementResponse": {
      "type": "object",
      "description": "The number of duplicate checks to perform.",
      "properties": {
        "body": {
          "$ref": "#/definitions/CriticalDataElement",
          "description": "The request body containing query criteria.",
          "readOnly": true
        }
      },
      "required": [
        "body"
      ]
    },
    "CriticalDataElement": {
      "type": "object",
      "description": "Represents a critical data element in the catalog with metadata and relationships.",
      "properties": {
        "status": {
          "$ref": "#/definitions/CatalogModelStatus",
          "description": "The current status of the critical data element.",
          "readOnly": true
        },
        "dataType": {
          "$ref": "#/definitions/CatalogModelCriticalDataElementDataTypeEnum",
          "description": "The data type of the critical data element."
        },
        "id": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "The unique identifier of the critical data element.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the critical data element."
        },
        "systemData": {
          "$ref": "#/definitions/CatalogModelSystemDataWithExpired",
          "description": "System metadata including creation and modification information.",
          "readOnly": true
        },
        "domain": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "The unique identifier of the domain this element belongs to."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the critical data element."
        },
        "contacts": {
          "type": "object",
          "description": "The contacts associated with this critical data element.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/CatalogModelContactsValueInner"
            },
            "type": "array"
          }
        },
        "managedAttributes": {
          "type": "array",
          "description": "Managed attributes associated with this critical data element.",
          "items": {
            "$ref": "#/definitions/CatalogModelManagedAttribute"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "CriticalDataElementFacetRequest": {
      "type": "object",
      "description": "CriticalDataElementFacetRequest.",
      "properties": {
        "ids": {
          "type": "array",
          "description": "To filter by Ids.",
          "items": {
            "type": "string"
          }
        },
        "domainIds": {
          "type": "array",
          "description": "To filter by domain Ids.",
          "items": {
            "type": "string"
          }
        },
        "nameKeyword": {
          "type": "string",
          "description": "To filter by name keyword."
        },
        "owners": {
          "type": "array",
          "description": "To filter by owners.",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/SharedEntityStatus",
          "description": "To filter by status."
        },
        "multiStatus": {
          "type": "array",
          "description": "To filter by multiple status.",
          "items": {
            "$ref": "#/definitions/SharedEntityStatus"
          }
        },
        "facets": {
          "type": "array",
          "description": "To filter by multiple facets.",
          "items": {
            "$ref": "#/definitions/ModelsFacetRequestObject"
          }
        }
      }
    },
    "CriticalDataElementQueryRequest": {
      "type": "object",
      "description": "Request parameters for querying critical data elements.",
      "properties": {
        "skip": {
          "type": "integer",
          "format": "int32",
          "description": "Number of items to skip."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "Number of items to return."
        },
        "orderby": {
          "type": "array",
          "description": "Ordering criteria for the results.",
          "items": {
            "$ref": "#/definitions/CatalogApiServiceOrderBy"
          }
        },
        "ids": {
          "type": "array",
          "description": "To filter by Ids.",
          "items": {
            "type": "string"
          }
        },
        "domainIds": {
          "type": "array",
          "description": "To filter by domain Ids.",
          "items": {
            "type": "string"
          }
        },
        "nameKeyword": {
          "type": "string",
          "description": "To filter by name keyword."
        },
        "owners": {
          "type": "array",
          "description": "To filter by owners.",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/SharedEntityStatus",
          "description": "To filter by status."
        },
        "multiStatus": {
          "type": "array",
          "description": "To filter by multiple status.",
          "items": {
            "$ref": "#/definitions/SharedEntityStatus"
          }
        },
        "managedAttributes": {
          "type": "array",
          "description": "To filter by managed attributes.",
          "items": {
            "$ref": "#/definitions/SharedSearchManageAttributeSearchFilter"
          }
        }
      }
    },
    "CriticalDataElementsResponse": {
      "type": "object",
      "description": "Response containing a list of critical data elements.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of critical data elements.",
          "items": {
            "$ref": "#/definitions/CriticalDataElement"
          }
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of results."
        }
      },
      "required": [
        "value"
      ]
    },
    "DataElementProperties": {
      "type": "object",
      "description": "DataElementProperties.",
      "properties": {
        "description": {
          "type": "string",
          "description": "The first additional property."
        },
        "entityId": {
          "type": "string",
          "description": "The second additional property."
        },
        "relationshipType": {
          "type": "string",
          "description": "The third additional property."
        }
      }
    },
    "FacetValue": {
      "type": "object",
      "description": "FacetValue.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the facet."
        },
        "count": {
          "type": "string",
          "description": "The count of items in the facet."
        }
      },
      "required": [
        "value",
        "count"
      ]
    },
    "FacetsResponse": {
      "type": "object",
      "description": "FacetsResponse.",
      "properties": {
        "facets": {
          "type": "object",
          "description": "The list of facets.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FacetValue"
            },
            "type": "array"
          }
        }
      },
      "required": [
        "facets"
      ]
    },
    "ModelsFacetRequestObject": {
      "type": "object",
      "description": "ModelsFacetRequestObject.",
      "properties": {
        "name": {
          "type": "string",
          "description": "name"
        }
      }
    },
    "PagedCdeRelationshipWrapper": {
      "type": "object",
      "description": "Paged collection of CdeRelationshipWrapper items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The CdeRelationshipWrapper items on this page",
          "items": {
            "$ref": "#/definitions/CdeRelationshipWrapper"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedCriticalDataElement": {
      "type": "object",
      "description": "Paged collection of CriticalDataElement items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The CriticalDataElement items on this page",
          "items": {
            "$ref": "#/definitions/CriticalDataElement"
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "RelationshipWrapper": {
      "type": "object",
      "description": "Wrapper for relationship information between entities.",
      "properties": {
        "systemData": {
          "$ref": "#/definitions/SystemData",
          "description": "System metadata for the relationship."
        },
        "description": {
          "type": "string",
          "description": "Description of the relationship."
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of the relationship."
        },
        "entityId": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Unique identifier of the related entity."
        }
      },
      "required": [
        "entityId"
      ]
    },
    "SharedEntityStatus": {
      "type": "string",
      "description": "Status of shared entities in the catalog.",
      "enum": [
        "Draft",
        "Published",
        "Expired"
      ],
      "x-ms-enum": {
        "name": "SharedEntityStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "Draft",
            "value": "Draft",
            "description": "The entity is in draft state."
          },
          {
            "name": "Published",
            "value": "Published",
            "description": "The entity is published and active."
          },
          {
            "name": "Expired",
            "value": "Expired",
            "description": "The entity has expired and is no longer active."
          }
        ]
      }
    },
    "SharedSearchManageAttributeSearchFilter": {
      "type": "object",
      "description": "Filter configuration for searching managed attributes.",
      "properties": {
        "field": {
          "type": "string",
          "description": "The field name to filter on."
        },
        "operator": {
          "type": "string",
          "description": "The comparison operator to use for filtering."
        },
        "value": {
          "type": "string",
          "description": "The value to compare against."
        },
        "type": {
          "type": "string",
          "description": "The data type of the filter value."
        }
      }
    },
    "SystemData": {
      "type": "object",
      "description": "System metadata for tracking entity lifecycle.",
      "properties": {
        "lastModifiedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the entity was last modified."
        },
        "lastModifiedBy": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "The unique identifier of the user who last modified the entity."
        },
        "createdAt": {
          "type": "string",
          "description": "The timestamp when the entity was created."
        },
        "createdBy": {
          "$ref": "#/definitions/Azure.Core.uuid",
          "description": "Unique identifier of the asset."
        }
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.OrderByQueryParameter": {
      "name": "orderby",
      "in": "query",
      "description": "Expressions that specify the order of returned results.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "description": "The number of result items to skip.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.TopQueryParameter": {
      "name": "top",
      "in": "query",
      "description": "The number of result items to return.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    }
  }
}
